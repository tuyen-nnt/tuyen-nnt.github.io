<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Blog</title>
    <description>Grow yourself and develop with me!</description>
    <link>https://tuyen-nnt.github.io/</link>
    <atom:link href="https://tuyen-nnt.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 05 Jul 2022 21:27:48 +0700</pubDate>
    <lastBuildDate>Tue, 05 Jul 2022 21:27:48 +0700</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>Apache Druid</title>
        <description>&lt;h3 id=&quot;apache-druid&quot;&gt;Apache Druid:&lt;/h3&gt;
&lt;p&gt;cre:  https://druid.apache.org/&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Là một loại database&lt;/li&gt;
  &lt;li&gt;Có các đặc điểm sau:
    &lt;ul&gt;
      &lt;li&gt;Real-time ingest data&lt;/li&gt;
      &lt;li&gt;Hiệu suất query nhanh&lt;/li&gt;
      &lt;li&gt;High uptime đảm bảo luôn đáp ứng được tính toán (quan trọng)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Thường được sử dụng để:
    &lt;ul&gt;
      &lt;li&gt;Power cho GUIs&lt;/li&gt;
      &lt;li&gt;Các ứng dụng analytical&lt;/li&gt;
      &lt;li&gt;Là backend cho các highly-concurent APIs mà cần tính toán nhanh.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thường sử dụng Druid cho những bài toán nào?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BI/OLAP&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clickstream analytics (web và mobile)
Đây là nơi chứa lượng data lớn như clicks, impressions, hoạt động view pages, add to card. Thông thường người ta sẽ tính toán lại các logic lấy được từ Google Analytics (được embedd vào web/mobile) về và kết hợp với sale data để cho ra các adhoc analysis phục vụ Biz.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Risk/Fraud analysis
Khi đã có đủ dữ liệu thì tìm insight dễ dàng.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Application performance metrics:
Lấy các chỉ số ví dụ như startup time, load pages từ hệ thống tracking về đưa vào Druid để monitor và alert realtime, giúp theo dõi và optimize hiệu năng của chương trình.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Server metrics storage&lt;/li&gt;
  &lt;li&gt;Supply chain analytics (manufacturing metrics)&lt;/li&gt;
  &lt;li&gt;Application performance metrics&lt;/li&gt;
  &lt;li&gt;Digital marketing/advertising analytics&lt;/li&gt;
  &lt;li&gt;Network telemetry analytics (network performance monitoring)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Triển khai thử với Druid cần gì?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;3 em VM (8cores mỗi em thôi)&lt;/li&gt;
  &lt;li&gt;kiến trúc microservice của Druid bắt buộc phải có: ZooKeeper, Coordinator, Overlord, Historical, Broker, Middlemanager.&lt;/li&gt;
  &lt;li&gt;Khi số lượng node lên hàng chục hoặc hàng trăm thì phải cài đặt thông qua Ansible.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;so-sánh-giữa-druid-và-spark&quot;&gt;So sánh giữa Druid và Spark:&lt;/h4&gt;

&lt;h5 id=&quot;spark&quot;&gt;Spark:&lt;/h5&gt;
&lt;p&gt;Spark là cluster computing framework được tạo ra dựa trên concept của Resilient Distributed Datasets (RDDs).&lt;/p&gt;

&lt;p&gt;RDDs cho phép tái sử dụng lại dữ liệu bằng cách lưu trữ lại các kết quả trung gian trong memory và cho phép Spark cung cấp các tính toán nhanh cho các thuật toán hay lặp lại. =&amp;gt; phù hợp nhiều cho Machine learning&lt;/p&gt;

&lt;p&gt;Tính tổng quan của Spark giúp nó phù hợp để làm sạch và transform dữ liệu.&lt;/p&gt;

&lt;p&gt;Mặc dù Spark có khả năng truy vấn dữ liệu thông qua SparkSQL nhưng nó không phù hợp cho các tương tác query cần tốc độ nhanh trong vài giây.&lt;/p&gt;

&lt;h5 id=&quot;druid&quot;&gt;Druid:&lt;/h5&gt;
&lt;p&gt;Thường được sử dụng để tăng tốc cho OLAP queries trong Spark.&lt;/p&gt;

&lt;p&gt;Sứ mệnh của nó là tập trung chủ yếu giảm độ trễ queries xuống mức tối đa và là framework lý tưởng để tăng tốc cho ứng dụng được sử dụng bởi hàng ngàn user. Làm sao để mà user có thể tương tác và nhận được kết quả nhanh chóng nhất.&lt;/p&gt;

&lt;p&gt;Druid index vào toàn bộ data và có thể làm lớp đứng giữa Spark và ứng dụng của bạn.&lt;/p&gt;

&lt;p&gt;Ứng dụng cơ bản nhất người ta setup đó là dùng Spark để xử lý data và load data đã được xử lý vào Druid để có thể truy cập query nhanh chóng.&lt;/p&gt;

&lt;p&gt;cre: https://druid.apache.org/docs/latest/comparisons/druid-vs-spark.html&lt;/p&gt;

&lt;p&gt;Đọc thêm: https://www.linkedin.com/pulse/combining-druid-spark-interactive-flexible-analytics-scale-butani&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;hadoop-là-gì&quot;&gt;Hadoop là gì?&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Là Apache framework viết bằng Java cho phép phát triển ứng dụng phân tán có cường độ dữ liệu lớn miễn phí. Được thiết kế để mở rộng máy chủ đơn sang hàng ngàn máy tính khác có tính toán và lưu trữ cục bộ (local computation và storage).
=&amp;gt; Hadoop cung cấp môi trường để thực thi các Map-Reduce task.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hadoop có cấu trúc liên kết master-slave, chỉ có 1 node master hoạt động tại 1 thời điểm và nhiều node slave:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Node master có nhiệm vụ giao task cho các slave&lt;/li&gt;
      &lt;li&gt;Node slave lưu trữ dữ liệu thực, thực tế thường không mạnh lắm.&lt;/li&gt;
      &lt;li&gt;Node slave lưu trữ metadata (thông tin của tất cả các node).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;Có 2 loại file metadata:
FsImage: Là nơi lưu trữ trạng thái của các file system namespace (từ này hơi khó để dịch) kể từ khi namenode được khởi động.
EditLogs: Là nơi lưu lại quá sửa đổi của các file system.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Kiến trúc Hadoop gồm có ba lớp chính đó là
    &lt;ul&gt;
      &lt;li&gt;HDFS (Hadoop Distributed File System)&lt;/li&gt;
      &lt;li&gt;Map-Reduce&lt;/li&gt;
      &lt;li&gt;Yarn&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;hdfs-hadoop-distributed-file-system&quot;&gt;HDFS (Hadoop Distributed File System)&lt;/h5&gt;

&lt;p&gt;Là hệ thống phân tán cung cấp khả năng lưu trữ dữ liệu khổng lồ và tính năng giúp tối ưu việc sử dụng băng thông giữa các node.&lt;/p&gt;

&lt;p&gt;Đặc biệt cho phép truy cập nhiều disk như là 1 disk. Nói cách khác là không bị giới hạn về dung lượng, nếu cần thêm chỉ cần thêm Node vào hệ thống là ok.&lt;/p&gt;

&lt;p&gt;Có thể được sử dụng để chạy trên cluster lớn với hàng chục ngàn node.&lt;/p&gt;

&lt;p&gt;Có kiến trúc Master-Slave với:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;NameNode chạy trên Master, có task quản lý Namespace (địa chỉ của file đó được chia và lưu trên các datanode nào) và điều chỉnh truy cập tệp của client cũng như điều khiển load-balancing cho các datanode.&lt;/li&gt;
  &lt;li&gt;DataNode chạy trên các Slave, có task lưu trữ biz data thực tế.
Tìm hiểu thêm tại: https://phambinh.net/bai-viet/kien-truc-cua-hdfs/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hdfs1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Một tập tin HDFS sẽ được chia làm nhiều block và được lưu trữ trong các DataNodes. Kích thước 1 block thường là 64MB và có thể thay đổi bằng việc cấu hình.&lt;/p&gt;

&lt;h4 id=&quot;map-reduce&quot;&gt;Map-Reduce&lt;/h4&gt;
&lt;p&gt;Là framework dùng để viết các application giúp xử lý song song lượng dữ liệu lớn có khả năng&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;https://www.youtube.com/watch?v=nfMANR13ZSA&lt;/p&gt;

&lt;h3 id=&quot;apache-flink&quot;&gt;Apache Flink:&lt;/h3&gt;
&lt;p&gt;Là framework để xử lý data.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use case:
    &lt;ul&gt;
      &lt;li&gt;Fraud Detection =&amp;gt; realtime&lt;/li&gt;
      &lt;li&gt;Offer Recommendation based on browsing history =&amp;gt; realtime&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Batch: Data at rest -&amp;gt; analysis on historical data&lt;/li&gt;
  &lt;li&gt;Realtime: processing the event as and when it happens&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 07 May 2022 00:00:00 +0700</pubDate>
        <link>https://tuyen-nnt.github.io/apache-druid/</link>
        <guid isPermaLink="true">https://tuyen-nnt.github.io/apache-druid/</guid>
        
        
      </item>
    
      <item>
        <title>Kafka Connect</title>
        <description>&lt;h4 id=&quot;write-head-logging&quot;&gt;Write-head logging&lt;/h4&gt;

&lt;p&gt;WAL là một trong các kỹ thuật cung cấp tính chất Atomicity và Durability (2 trong số 2 tính chất ACID) trong hệ thống database.&lt;/p&gt;

&lt;p&gt;Các thay đổi được lưu lại trong log và sẽ phải được ghi vào trong stable storage (thường không phải là disk vì không có tính chất automic) trước khi các thay đổi đó được ghi vào database.&lt;/p&gt;

&lt;p&gt;Trong 1 cái hệ thống sử dụng WAL, tất cả mọi thay đổi được ghi vào log trước khi được áp dụng. Thường thì các thay đổi &lt;code&gt;redo&lt;/code&gt; và &lt;code&gt;undo&lt;/code&gt; được lưu vào trong log.&lt;/p&gt;

&lt;p&gt;Ok, mục đích sử dụng của WAL có thể hiểu được qua ví dụ sau:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Khi mà chương trình của bạn đang chạy nhưng bị crash hay mất điện giữa chừng. Sau khi khởi động lại thì chương trình cần biết là operation đã thành công hay thành công 1 nửa hay thất bại hay như thế nào.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lúc này nếu sử dụng WAL, thì chương trình có thể xem log để so sánh với những gì đã thực hiện và chưa thực hiện lúc chương trình bị crash và quyết định xem sẽ undo lại operation hay hoàn tất nốt operation hoặc giữ nguyên mọi thứ.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Các hệ quản trị cơ sở dữ liệu khác nhau sẽ có tên gọi cho WAL log khác nhau. Trong MySQL sẽ là &lt;code&gt;binlog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ngoài ra 1 transaction được xem là thành công thì các statements của nó phải toàn bộ thành công, ngược lại nếu 1 trong các statement cấu thành 1 transaction thất bại thì là thất bại. Điều này đảm bảo tính &lt;code&gt;automicity&lt;/code&gt; trong ACID để được gọi là 1 database transaction.&lt;/p&gt;

&lt;h3 id=&quot;kafka-connect&quot;&gt;Kafka Connect&lt;/h3&gt;

&lt;p&gt;Kafka Connect là 1 component của Kafka giúp kết nối và transfer data giữa các external system với Kafka.&lt;/p&gt;

&lt;p&gt;Bây giờ đi từ use case, bạn cần kết nối data giữa Order database đến Kafka Cluster và từ Kafka Cluster kết nối đến Data warehouse để phân tích data, có 2 cách:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cách 1: Sửa source code của Order service để tạo producer trong đó đọc data từ database rồi gửi đến Kafka cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nhược điểm: khi cần thay đổi code cho producer thì phải deploy lại service có thể gây downtime ảnh hưởng đến người dùng. 
Phụ thuộc vào Order service chạy hay không chạy (nếu service có multi-replicas thì không sao).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Cách 2: Tạo Kafka producer độc lập đọc data từ Order database và produce đến Kafka broker.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nhược điểm: cần maintain thêm service này cho Kafka producer.
Cần thiết kế để scalable, fault tolerance,…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;=&amp;gt; Kafka Connect sử dụng cách 2.
Hiện Kafka connect đã có open-source framework cho phép chọn loại connector (là loại source/target) rồi config và sử dụng, hoặc bạn có thể tự viết connector riêng dựa trên framework này.&lt;/p&gt;

&lt;p&gt;Ta sử dụng có sẵn thì sẽ không cần 1 dòng code nào mà chỉ cần tạo config để nó hoạt động còn lại Kafka connect sẽ tự lo.&lt;/p&gt;

&lt;p&gt;Tương tự ta sẽ cần config cho 1 Kafka connect để connect từ Kafka cluster đến Data warehouse.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kafka-connect.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Có 2 loại connect là Source connector và Sink connector:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Bên trái được gọi là &lt;code&gt;Source connector&lt;/code&gt;: pull data từ source system và gửi đến Kafka cluster.
Bên phải là &lt;code&gt;Sink connector&lt;/code&gt;: consume data từ topic và sink đến hệ thống đích.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;cách-hoạt-động-của-kafka-connect&quot;&gt;Cách hoạt động của Kafka connect&lt;/h4&gt;

&lt;p&gt;Kafka connect như 1 interface, ở abstract level, tạo các API để 3rd party có thể sử dụng dựa trên cách hoạt động của từng service.&lt;/p&gt;

&lt;p&gt;Nó chỉ cung cấp phần API đóng mở connection, tạo statement, execute query, tương tác với database. Còn lại là việc của database driver cụ thể như JDBC driver cho Mysql,…&lt;/p&gt;

&lt;p&gt;Kafka connect framework bao gồm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Source connector:
        SourceConnector.
        SourceTask.
    Sink connector:
        SinkConnector.
        SinkTask.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;=&amp;gt; Ta chỉ cần implement 2 class cho mỗi Kafka connect là:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    SourceConnector và SourceTask.
    Hoặc SinkConnector và SinkTask.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Còn lại 1 số thứ cơ bản như độ scalibility , fault tolerance hay error handling đã có Kafka connect lo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mysql-kafkaconnect-es.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;kafka-connect-transformation&quot;&gt;Kafka connect Transformation&lt;/h3&gt;

&lt;p&gt;Đôi khi trong quá trình transfer data, ta có thể cần phải điều chỉnh messages để biến đổi nó theo như format mà chúng ta muốn.&lt;/p&gt;

&lt;p&gt;Khi đó ta có thể dùng tính năng Single Message Transformations - SMTs để làm điều này trong config của Source connector hoặc Sink connector.&lt;/p&gt;

&lt;p&gt;SMTs bao gồm 1 số thao tác phổ biến:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thêm field mới cho message.&lt;/li&gt;
  &lt;li&gt;Filter message dựa trên field.&lt;/li&gt;
  &lt;li&gt;Rename field.&lt;/li&gt;
  &lt;li&gt;Route message đến các topic khác nhau.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;kafka-connect-architecture&quot;&gt;Kafka connect Architecture&lt;/h4&gt;
&lt;p&gt;Gồm các keyword chính:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1) Worker : là công nhân thực thi các task để gửi msgs đến Kafka cluster. (còn việc read/write từ/đến source thì là của Source/SinkTask theo config của ta xong rồi mới chuyển cho worker thực thi nhé)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;Worker có 2 khả năng đặc biệt:

* Fault tolerance: khi worker gặp sự cố sẽ phân task cho worker khác handle tiếp.

* Self-managed: khi có worker mới các task sẽ được phân phối lại đảm bảo load balance.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;=&amp;gt; Có 4 tính năng Reliability, High avalability, Scalability, Load balancing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2) Connector : tạo API kết nối với các system&lt;/li&gt;
  &lt;li&gt;3) Task : ví dụ transfer từ table 1 sang table 2 là 1 task&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OK, vậy việc của chúng ta bây giờ là:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Làm thế nào để phân chia input thành các phần có thể thực hiện đồng thời. Làm thế nào để tương tác với các external system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;debezium&quot;&gt;Debezium&lt;/h3&gt;

&lt;p&gt;Mysql có binlog dùng cho việc replication và recovery. File này chứa các thay đổi của database (trước khi ghi vào database) bao gồm cả thay đổi về dữ liệu table và cả schema của table.&lt;/p&gt;

&lt;p&gt;Sau đó các thay đổi này mới được ghi vào database rồi sẽ được commit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Debezium Mysql connector&lt;/strong&gt; là một plugin trong Kafka giúp kết nối Mysql với Kafka.&lt;/p&gt;

&lt;p&gt;Connector này sẽ đọc sự thay đổi trong binlog và tạo ra các event INSERT/UPDATE/DELETE để đẩy lên Kafka.&lt;/p&gt;

&lt;p&gt;Mysql được cài đặt sẽ xóa data trong binlog sau 1 thời gian ngắn nên Debezium Mysql connector sẽ chụp nhanh snapshot của hiện trạng dữ liệu và đọc nó ngay tại thời điểm được chụp.&lt;/p&gt;

&lt;h4 id=&quot;cách-hoạt-động-của-debezium&quot;&gt;Cách hoạt động của Debezium&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Schema history topic:
Binlog sẽ vừa lưu thay đổi về row-level data vừa lưu DDL statement để biết được schema tại 1 thời điểm có thay đổi không và thay đổi ra sao để produce event lên kafka chính xác.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Còn trên database của kafka topic, connector sẽ vừa lưu DDL statements vừa lưu vị trí có DDL statement trong binlog.&lt;/p&gt;

&lt;p&gt;Khi có sự cố crash phải restart lại connector, nó sẽ đọc trong binlog tại 1 thời điểm cụ thể x. Connector sẽ rebuild lại schema từ &lt;code&gt;database history topic Kafka&lt;/code&gt; cho đến thời điểm x mà nó được start lại trong binlog.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Schema change topic:
Bạn có thể cấu hình để Debezium Mysql connector produce các “schema change event” mô tả sự thay đổi của database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Message được connector gửi đến cho Kafka topic name &lt;serverName&gt; được cấu hình trong connector với property ``database.server.name``  (https://debezium.io/documentation/reference/1.8/connectors/mysql.html#mysql-property-database-server-name).&lt;/serverName&gt;&lt;/p&gt;

&lt;p&gt;Message này chứa payload và có thể tùy chọn để chứa luôn schema của change event message. Phần payload gồm:&lt;/p&gt;

&lt;p&gt;ddl&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Provides the SQL CREATE, ALTER, or DROP statement that results in the schema change.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;databaseName&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The name of the database to which the DDL statements are applied. The value of databaseName serves as the message key.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pos&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The position in the binlog where the statements appear.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tableChanges&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A structured representation of the entire table schema after the schema change. The tableChanges field contains an array that includes entries for each column of the table. Because the structured representation presents data in JSON or Avro format, consumers can easily read messages without first processing them through a DDL parser.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;thực-hành&quot;&gt;Thực hành&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Debezium: https://debezium.io/documentation/reference/1.8/tutorial.html#viewing-create-event&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Streaming from Mysql to Postgres và Elasticsearch
https://debezium.io/blog/2018/01/17/streaming-to-elasticsearch/&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;Ref: 
https://debezium.io/documentation/reference/1.8/connectors/mysql.html
https://docs.confluent.io/kafka-connect-elasticsearch/current/configuration_options.html
https://docs.confluent.io/kafka-connect-elasticsearch/current/overview.html
https://baonq5.notion.site/Sample-connector-config-55b33df3898346fc93c94c7a697d44a6&lt;/p&gt;

&lt;p&gt;https://en.wikipedia.org/wiki/Write-ahead_logging
https://viblo.asia/p/010-apache-kafka-connect-concept-gAm5ymNL5db
https://en.wikipedia.org/wiki/ACID&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Jan 2022 00:00:00 +0700</pubDate>
        <link>https://tuyen-nnt.github.io/kafka-connect/</link>
        <guid isPermaLink="true">https://tuyen-nnt.github.io/kafka-connect/</guid>
        
        
        <category>Data</category>
        
      </item>
    
      <item>
        <title>Query Elasticsearch</title>
        <description>&lt;p&gt;Các cách query:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dùng Query string
    &lt;pre&gt;&lt;code&gt;GET /ecommerce/product/_search?q=*
hoặc 
GET /ecommerce/product/_search?q=pasta
hoặc có field name:
GET /ecommerce/product/_search?q=name:pasta
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Dùng Compound Queries (Query DSL)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;GET /&amp;lt;index&amp;gt;/&amp;lt;category&amp;gt;/_search
{
	&quot;query&quot;: {
		&quot;bool&quot;: {
			&quot;must&quot;: [
				{ &quot;match&quot;: { &quot;name&quot;: &quot;pasta&quot; } }
			]
			&quot;should&quot;: [
			{ &quot;match&quot;: { &quot;name&quot;: &quot;spaghetti&quot; } }
			]
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Giải thích về &lt;code&gt;must&lt;/code&gt; và &lt;code&gt;should&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;must means: The clause (query) must appear in matching documents. These clauses must match, like logical AND.

should means: At least one of these clauses must match, like logical OR.

Basically they are used like logical operators AND and OR. See this.

Now in a bool query:

must means: Clauses that must match for the document to be included.

should means: If these clauses match, they increase the _score; otherwise, they have no effect. They are simply used to refine the relevance score for each document.

Cre: https://stackoverflow.com/questions/28768277/elasticsearch-difference-between-must-and-should-bool-query
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;must&lt;/code&gt;: truy vấn bắt buộc phải xuất hiện trong kết quả trả về, và các truy vấn con trong must có mối quan hệ AND với nhau.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;should&lt;/code&gt;: nếu truy vấn có trong kết quả thì score sẽ tăng thêm, score này được tính bằng 1 số phép toán học. Các filter con trong should có mỗi quan hệ OR với nhau.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;=&amp;gt; Vì must và should nằm trong bool nên nếu chỉ có should mà không có must hay must_not thì truy vấn trong should (nếu chỉ có 1 filter) bắt buộc xuất hiện trong kết quả.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Cách hoạt động của query clause phụ thuộc vào nó là Query context hay Filter context.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Query context?&lt;/code&gt;
Trả lời câu hỏi ““document này phù hợp với mệnh đề truy vấn nhiều như thế nào?”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Query context sẽ có _score để đo mức độ phù hợp với truy vấn của document, tối đa là 1.0.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;_score được tính bởi thuật toán đặc biệt chúng ta sẽ chưa tìm hiểu ở đây.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Query context là khi mệnh đề truy vấn được truyền vào tham số “query” trong search API.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Filter context?&lt;/code&gt;
Trả lời câu hỏi “document này có phù hợp với mệnh đề truy vấn không?”, CÓ hoặc KHÔNG.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Filter context là khi truyền mệnh đề truy vấn vào tham số “filter” hay “must_not”.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;match_all{}&lt;/code&gt;:
Không cần query bên trong. Nó trả về tất cả document, tất cả đều có _score là 1.0&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;match{&quot;&amp;lt;field_name&amp;gt;&quot; : {&quot;query&quot; : &quot;&amp;lt;giá trị&amp;gt;&quot;}}&lt;/code&gt;: trả về các document thỏa giá trị mà ta cung cấp.
Đối với giá trị text, text sẽ được analyze khi tìm kiếm, kết quả sau analyze sẽ được xây dựng thành 1 boolean query. Ta có thể cấu hình thêm tham số &lt;code&gt;operand&lt;/code&gt; (mặc định là or).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ngoài ra còn rất nhiều các tham số khác sử dụng trong các trường hợp phức tạp, bạn có thể đọc thêm ở https://www.elastic.co/guide/en/elasticsearch/reference/7.6/query-dsl-match-query.html&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;multi-match {&quot;query&quot;:&amp;lt;giá trị&amp;gt; , &quot;fields&quot; : [&quot;&amp;lt;field_name1&amp;gt;&quot; , &quot;&amp;lt;field_name2&amp;gt;&quot;]}&lt;/code&gt;
Trả về các document mà các field thỏa giá trị query. Ở đây có thể dùng wildcards trong trường field để chỉ nhiều field.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ví dụ: &lt;code&gt;*_name&lt;/code&gt; thì các field được tìm kiếm sẽ là first_name, last_name,…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;must&lt;/code&gt;
Mệnh đề trong must phải có trong kết quả, các mệnh đề con có mối quan hệ AND.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;must-not&lt;/code&gt;
Mệnh đề trong must không được có trong kết quả, các query bên trong có mối quan hệ NOT và AND.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;should&lt;/code&gt;
Kết quả trả về phải thỏa 1 trong các query của should, các query bên trong có mối quan hệ OR với nhau.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;bool&lt;/code&gt;: là 1 compound query clause.
Boolean query được dùng để kết hợp nhiều mệnh đề query khác nhau gồm must, must-not, should, filter.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;filter&lt;/code&gt;: document trả về phải thỏa tất cả query bên trong filter, vì là filter context nên _score được bỏ qua và mệnh đề được xem xét để cache.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;range {&quot;&amp;lt;field_name&amp;gt;&quot; : { &quot;gte&quot; : &amp;lt;giá trị&amp;gt; , &quot;lt&quot; : &amp;lt;giá trị&amp;gt; }}&lt;/code&gt;:
Trả về các document có giá trị nằm trong range đề cập trong range query.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;term {&quot;&amp;lt;field_name&amp;gt;&quot; : {&quot;value&quot; : &amp;lt;giá trị chính xác&amp;gt; }}&lt;/code&gt;
Trả về các document có giá trị chính xác được đề cập trong term query.
Lưu ý khi dùng term query đối với giá trị text, vì text sẽ được analyze và case sensitive.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 15 Jan 2022 00:00:00 +0700</pubDate>
        <link>https://tuyen-nnt.github.io/elasticsearch/</link>
        <guid isPermaLink="true">https://tuyen-nnt.github.io/elasticsearch/</guid>
        
        
        <category>Data</category>
        
      </item>
    
      <item>
        <title>Làm được gì từ web data?</title>
        <description>&lt;p&gt;Mở socket » connect đến đường dẫn và port » Tạo biến string cmd request GET, POST,… » encode string cmd thành dạng byte » gửi request đi.&lt;/p&gt;

&lt;p&gt;Nhận response về từ thế giới bên ngoài (ngầm hiểu là UTF-8 » decode response từ dạng byte thành dạng unicode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/unicode.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UTF-8 là bảng mã tham chiếu có thể detect được bảng mã ASCII hay UTF-8 (xét từ ASCII trước) mà allocate động kích thước của ký tự trong khoảng từ 1-4 bytes. Được recommend để dùng cho việc encode data giữa 2 hệ thống khác nhau.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Trong Python 3 thì tất cả kiểu dữ liệu string đều dùng bảng mã unicode. Còn Python 2 thì phân rõ 1 string bất kỳ đang được mã hóa thành kiểu dữ liệu là unicode hay string, còn byte và string thì giống nhau là kiểu string thôi.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;beautiful-soup-for-html&quot;&gt;Beautiful soup (for HTML)&lt;/h4&gt;
&lt;p&gt;Cài đặt vào chương trình python hoặc extract thư mục bs4.zip bỏ vào cùng folder chứa file code sử dụng thư viện này.
&lt;img src=&quot;/assets/images/install-bs4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;from bs4 import BeautifulSoup&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;read() : hàm đọc nguyên block data bao gồm cả \n&lt;/p&gt;

&lt;p&gt;&lt;code&gt;soup = BeautifulSoup(html, 'html.parser')&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;với html là data được read() từ url nhập vào
sau đó sẽ được beautifulsoup parse (biến đổi) thành 1 soup object được clean sạch sẽ, xinh đẹp.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/bs4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sau đó, chúng ta sẽ parse ra list danh sách tất cả các thẻ &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; và đọc từng object trong list &lt;code&gt;tags&lt;/code&gt; để get và in ra attribute &lt;code&gt;href&lt;/code&gt; hoặc None.&lt;/p&gt;

&lt;h4 id=&quot;summary&quot;&gt;Summary&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Web scraping là lấy data từ web về, có 2 ngữ cảnh để diễn tả:
    &lt;ul&gt;
      &lt;li&gt;Là khi 1 chương trình hay đoan script giả vờ như là 1 browser thu thập data của web, extract, và tìm kiếm web khác để làm thu thập tiếp.&lt;/li&gt;
      &lt;li&gt;Web Crawling data là như 1 cỗ máy tìm kiếm đi thu thập rà data trên mạng từ nơi này đến nơi khác như spider (chú ý về pháp lý).&lt;/li&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP/IP cung cấp pipes/sockets giữa các ứng dụng&lt;/li&gt;
  &lt;li&gt;Người ta tạo ra protocol cho application để sử dụng các pipes này.&lt;/li&gt;
  &lt;li&gt;HTTP là 1 giao thức powerful đơn giản.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;=&amp;gt; Với sự hỗ trợ cho HTML, HTTP và socket, Python đã giúp đơn giản hóa quá trình gửi và nhận dữ liệu từ web chỉ với vài dòng code khi dùng lib &lt;code&gt;urllib&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;data-on-web&quot;&gt;Data on Web&lt;/h3&gt;

&lt;p&gt;Việc trao đổi dữ liệu giữa 2 ứng dụng có network độc lập được support tốt khi sử dụng giao thức HTTP.
Vậy tiếp theo ta phải thống nhất dữ liệu ở format nào để mà trao đổi giữa 2 ứng dụng (ví dụ 2 app xài 2 ngôn ngữ khác nhau chẳng hạn). Có 2 format phổ biến là XML và JSON.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/wire-protocol.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;xml&quot;&gt;XML&lt;/h4&gt;
&lt;p&gt;Dùng để share structure data giữa các system.&lt;/p&gt;

&lt;p&gt;Gồm các thành phần cơ bản sau:
&lt;img src=&quot;/assets/images/xml-basic.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Các tag trong XML không quan trọng khoảng trắng như code, chỉ phân biệt khoảng trắng của text trong tag.&lt;/p&gt;

&lt;p&gt;Serialization/De-serialization: là quá trình chuyển đổi data từ 1 system ra cấu trúc chung và chuyển đổi ngược lại để gửi cho system khác.&lt;/p&gt;

&lt;p&gt;XML như 1 cái cây nhị phân.
&lt;img src=&quot;/assets/images/xml-tree.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;XML cũng có cấu trúc đường dẫn như thư mục a/b/c sẽ lấy được data bất kỳ.&lt;/p&gt;

&lt;h4 id=&quot;xml-schema&quot;&gt;XML Schema&lt;/h4&gt;
&lt;p&gt;Như một cái hợp đồng giữa 2 ứng dụng trao đổi kết nối với nhau. Schema sẽ check cú pháp của XML thỏa các điều kiện đã đặt ra ban đầu. Điều này giúp 2 ứng dụng không bàn cãi về lỗi do XML hay do bản thân của ứng dụng khiến kết nối bị lỗi. (Ta phải xác định lỗi và chặn đứng ngay thời điểm trao đổi dữ liệu.)
&lt;img src=&quot;/assets/images/xml-schema.png&quot; alt=&quot;&quot; /&gt; 
=&amp;gt; XML Schema được thiết lập để giải quyết những bất đồng giữa các ứng dụng hợp tác.
Đuôi file là &lt;code&gt;.XSD&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;XML Validation: là hành động lấy từ XML Document và XML Schema Contract và gửi đến XML Validator.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/xml-validation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;parsing-xml&quot;&gt;Parsing XML&lt;/h4&gt;
&lt;p&gt;Có 2 xu hướng khi parsing đó là:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Hành trình đi từ đầu cây đến cuối cây.
&lt;img src=&quot;/assets/images/xml-parsing1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tạo ra list các cây rồi đi từ đầu cây đến cuối cây.
&lt;img src=&quot;/assets/images/xml-parsing2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;=&amp;gt; XML schema rất quan trọng, đặc biệt khi cây trở nên phức tạp và có ai đó chỉnh sửa XML không theo cú pháp quy định làm ảnh hưởng đến code parsing. Khi đó Schema sẽ là thứ hỗ trợ tốt việc phân định nguyên nhân gây lỗi khi parsing.&lt;/p&gt;

&lt;h4 id=&quot;json&quot;&gt;JSON&lt;/h4&gt;

&lt;p&gt;Là định dạng phổ biến nhất hiện tại vì nó đơn giản, ánh xạ trực tiếp vào cấu trúc nội bộ của các ngôn ngữ lập trình. Nó gần với các kiểu dữ liệu lập trình nên thân thiện và dễ sử dụng. JSON sẽ không bao giờ thay đổi mà chỉ có cái khác thay thế nó thôi.&lt;/p&gt;

&lt;p&gt;JSON là object literal notation in Javascript, được biểu diễn bằng kiểu dữ liệu “lists” và “dictionaries”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/json.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;api&quot;&gt;API&lt;/h4&gt;
&lt;p&gt;Là specification để chỉ ra pattern của URL, cú pháp của dữ liệu mà ta dự định gửi đi và cú pháp dữ liệu ta muốn nhận về.&lt;/p&gt;

&lt;p&gt;Implementation của API là những người mà sử dụng API đó:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Nhà sản xuất API: là người giữ data và tạo ra API sau đó xuất khẩu nó và định nghĩa, đưa ra luật lệ.&lt;/li&gt;
  &lt;li&gt;Người dùng API: là người đọc document của nhà sản xuất, viết mã code và tuân thủ các quy tắc của nhà sản xuất đối với API đó.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API sẽ trả về định dạng JSON, sau đó chúng ta sẽ parse nó để phục vụ mục đích riêng.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/api-parsing.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;uh là handler, nó không thực sự kéo data về mà chỉ mới mở ra.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;data có kiểu dữ liệu là Python unicode string&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;js là 1 Python dictionary (object) vì dùng hàm &lt;code&gt;json.loads&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;securing-api-request&quot;&gt;Securing API request&lt;/h4&gt;
&lt;p&gt;Nhà cung cấp API họ phải tốn nhiều nguồn lực để lưu trữ, nghiên cứu dữ liệu nên data được cung cấp bởi API thường rất có giá trị.&lt;/p&gt;

&lt;p&gt;Nhà cung cấp thường giới hạn truy cập hoặc yêu cầu có API key, hoặc charge phí. Họ sẽ thay đổi rule của API khi mọi thứ phát triển hơn.&lt;/p&gt;

&lt;h5 id=&quot;authentification--authorization&quot;&gt;Authentification &amp;amp; authorization&lt;/h5&gt;
&lt;p&gt;Đọc documentation của API và nó sẽ nói bạn sẽ cần làm gì.&lt;/p&gt;

&lt;p&gt;Dòng dưới đây execute phần authorization, &lt;code&gt;twurl&lt;/code&gt; import từ file code tự viết &lt;code&gt;twurl.py&lt;/code&gt;:
&lt;img src=&quot;/assets/images/twurl.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sau khi đọc data từ bên ngoài trở thành dạng string biểu diễn cho dictionary, để biết limit còn lại của việc pull data từ API của bên khác. Ta chỉ cần cast thành dict, đọc header và chỉ số &lt;code&gt;x-rate-limit-remaining&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;OK, để setup authentication, ta cần tạo 1 file ở đây ví dụ là file hidden.py lấy trên trang web document API:
&lt;img src=&quot;/assets/images/oauth.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Để làm điều này ta đã phải sử dụng giao thức OAuth, thực tế là chúng ta đang ký tên lên URL. Kết quả trả về sẽ là URL + chữ ký trên URL.
&lt;img src=&quot;/assets/images/twurl2.png&quot; alt=&quot;&quot; /&gt; 
&lt;em&gt;import oauth là thư viện của Python&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Và đây là file main hoàn chỉnh:
&lt;img src=&quot;/assets/images/twitter2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;json.dumps là hàm convert 1 Python dictionary (object) thành json string&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Dec 2021 00:00:00 +0700</pubDate>
        <link>https://tuyen-nnt.github.io/access-web-data/</link>
        <guid isPermaLink="true">https://tuyen-nnt.github.io/access-web-data/</guid>
        
        
        <category>Data</category>
        
      </item>
    
      <item>
        <title>MongoDB cơ bản</title>
        <description>&lt;h3 id=&quot;bắt-đầu-với-mongodb&quot;&gt;Bắt đầu với MongoDB&lt;/h3&gt;

&lt;p&gt;Install MongoDB:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install -y mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tạo folder mongodb/data/db &amp;amp; mongodb/log để đảm bảo các dữ liệu được lưu vào file system.&lt;/p&gt;

&lt;p&gt;Navigate tới thư mục chạy chương trình: &lt;code&gt;cd mongodb/bin&lt;/code&gt; (folder được tạo có sẵn sau khi install)&lt;/p&gt;

&lt;p&gt;Mount đường dẫn để cho phép chương trình run as service: &lt;code&gt;mongod --directoryperdb --dbpath \home\tuyen\mongodb\data\db --logpath \home\tuyen\mongodb\log\mongo.log --logappend --rest --install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run as service in background: &lt;code&gt;sudo systemctl start mongod&lt;/code&gt;
hoặc &lt;code&gt;service mongodb start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Bắt đầu làm việc trên Mongo Shell gõ: &lt;code&gt;mongo&lt;/code&gt;. Gõ &lt;code&gt;cls&lt;/code&gt; trong shell nếu muốn clear màn hình console.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;các-câu-lệnh-thao-tác-với-mongodb&quot;&gt;Các câu lệnh thao tác với MongoDB&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;List các database:
&lt;code&gt;show dbs&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tạo database mới và switch sang db đó: &lt;code&gt;use &amp;lt;tên db&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Show db đang hoạt động : &lt;code&gt;db&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cú pháp json của &lt;code&gt;document&lt;/code&gt; (như 1 row trong Mysql):&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{
	first_name:&quot;John&quot;,
	last_name:&quot;Doe&quot;,
	memberships: [&quot;mem1&quot;, &quot;mem2&quot;] //array
	address:{
		      street:&quot;4 main st&quot;,
		      city: &quot;Boston&quot;
    }

	contacts:[
		     {name: &quot;Brad&quot;, relationship:&quot;friend&quot;},
 	 ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;lưu ý định dạng file json, phần tử street nằm dưới dấu &lt;code&gt;{&lt;/code&gt;, phần tử {name nằm dưới dấu &lt;code&gt;:&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Tạo user admin:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;db.createUser({
		  user:&quot;brad&quot;,
		  pwd:&quot;1234&quot;
		  roles:[&quot;readWrite&quot;, &quot;dbAdmin&quot;]
})
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Tạo collections (như table trong relational DB) : &lt;code&gt;db.createCollection('&amp;lt;tên collection&amp;gt;')&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Show collections: &lt;code&gt;show collections&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Insert documents vào collection:
    &lt;pre&gt;&lt;code&gt;db.customers.insert({first_name:&quot;John&quot;, last_name:&quot;Doe&quot;}, {first_name:&quot;Steven&quot;, last_name:&quot;Smith&quot;, gender: &quot;male&quot;});
&lt;/code&gt;&lt;/pre&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Vì Mongo là NoSQL nên nó có thể add thêm các doc với fieldname tùy ý.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;List ra các documents (hàm pretty() giúp dễ nhìn hơn): &lt;code&gt;db.customers.find().pretty();&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Update document:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cách 1: ghi lại tất cả các field&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.customers.update({first_name:&quot;John&quot;}, {first_name:&quot;John&quot;, last_name:&quot;Doe&quot;, &quot;gender&quot;:&quot;male&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cách 2: dùng &lt;code&gt;$set&lt;/code&gt; để không cần lặp lại các field giữ nguyên.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.customers.update({first_name:&quot;John&quot;}, {$set:{gender:&quot;male&quot;}});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Tăng số cho 1 field dùng trong tính toán:
Ví dụ tăng 5 tuổi cho John.
```
db.customers.update({first_name:”John”}, {$set:{age:45}});&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;db.customers.update({first_name:”John”}, {$inc:{age:5}});&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* Xóa field name bất kỳ của 1 document:
Ví dụ xóa trường age của John.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;db.customers.update({first_name:”John”}, {$unset:{age}});&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* Update nếu không thỏa điều kiện thì insert doc mới dùng ``upsert``:

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;db.customers.update({first_name:”Mary”}, {first_name:”Mary”, last_name:”Samson”},{upsert: true});&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* Rename fieldname: 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;db.customers.update({first_name:”Mary”}, {$rename:{“gender”: “sex”}});&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* Remove document:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;db.customers.remove({first_name:”Mary”})&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* Remove document limit 1:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;db.customers.remove({first_name:”Mary”}, {justOne: true});&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* Query tìm kiếm:

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;db.customers.find({first_name:”Mary”});&lt;/p&gt;

&lt;p&gt;// show limit 
db.customers.find().limit(4);&lt;/p&gt;

&lt;p&gt;//select doc có tuổi &amp;gt; 40
db.customers.find({age:{$gt:40}})&lt;/p&gt;

&lt;p&gt;//select doc có name là Mary hoặc John
db.customers.find({$or:[{first_name:”Mary”}, {first_name:”John”}]})&lt;/p&gt;

&lt;p&gt;//select doc có field name là object
db.customers.find({“address.city”:”Boston”})&lt;/p&gt;

&lt;p&gt;//select doc có fieldname là array, chọn ra các doc có mem1 trong array memberships
db.customers.find({memberships:”mem1”})&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* Sort 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;// ASC : 1
db.customers.find().sort({last_name:1);&lt;/p&gt;

&lt;p&gt;// DESC: -1
db.customers.find().sort({last_name:1);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
* Count document

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;db.customers.find().count();&lt;/p&gt;

&lt;p&gt;// count có điều kiện
db.customers.find({gender:”male”}).count();&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* Function:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;db.customers.find().forEach(function(doc){print(“Customer Name”+ doc.first_name)});
```&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Customer Name: John
Customer Name: Mary&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 14 Nov 2021 00:00:00 +0700</pubDate>
        <link>https://tuyen-nnt.github.io/mongodb/</link>
        <guid isPermaLink="true">https://tuyen-nnt.github.io/mongodb/</guid>
        
        
        <category>Data</category>
        
      </item>
    
      <item>
        <title>Tìm hiểu Network</title>
        <description>&lt;h2 id=&quot;i-mô-hình-mạng-5-tầng&quot;&gt;I. Mô hình mạng 5 tầng&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/five-layer-network.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tầng 1: Physical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ví dụ như dây cáp mạng, hay các đầu nối, tín hiệu gửi để kết nối các máy tính với nhau. Ngoài ra tầng này còn mô tả cách tín hiệu được gửi qua các kết nối vật lý này.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tầng 2: Data Link&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dùng để diễn giải các tín hiệu của tầng 1 một cách chung chung để các thiết bị mạng có thể giao tiếp.
Có nhiều giao thức ở tầng này nhưng phổ biến nhất là Ethernet, có nhiệm vụ nhận dữ liệu và truyền đến các nodes trên cùng 1 mạng hoặc link. 
Tầng này nhận dữ liệu trên 1 đường liên kết đơn.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tầng 3: Network (or Internet)
 &lt;img src=&quot;/assets/images/network-layer.png&quot; alt=&quot;&quot; /&gt;
 Là tầng cho phép các mạng khác nhau liên kết với nhau thông qua các thiết bị router (bộ định tuyến). 
 Tập hợp các mạng kết nối với nhau thông qua router gọi là Internetwork (mạng liên kết). Mạng liên kết phổ biến nhất là &lt;code&gt;Internet&lt;/code&gt; :D.
 Tầng này chịu trách nhiệm nhận dữ liệu được phân phối từ 1 tập hợp các mạng.
Giao thức phổ biến nhất ở tầng này là giao thức IP (Internet protocol).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Một phần mềm mạng gồm &lt;code&gt;Client&lt;/code&gt; và &lt;code&gt;Server&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Client gửi request&lt;/li&gt;
  &lt;li&gt;Server thì gửi về response&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Một node có thể chạy nhiều chương trình client hoặc server cùng lúc.
Kiểu như ở client (server host) của bạn cùng thao tác nhiều chương trình cùng lúc để request (như mail, trình duyệt web), thì server ngoài cũng có thể chạy nhiều chương trình để trả về response cho bạn.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tầng 4: Transport&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Trong khi tầng Network cung cấp dữ liệu giữa 2 node riêng lẻ thì tầng Transport có nhiệm vụ phân loại ra chương trình client hay server nào có nhiệm vụ nhận dữ liệu đó.&lt;/p&gt;

&lt;p&gt;Giao thức phổ biến nhất ở tầng này chính là TCP (Transmission Control Protocol). Người ta hay gọi theo cụm là TCP IP.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Nhưng TCP IP ko phải là tên gọi của 1 giao thức, nó chỉ là tên gọi chung kết hợp của giao thức ở tầng 3 và tầng 4. Mỗi giao thức đều có công dụng khác nhau.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ngoài ra có 1 giao thức thuộc tầng 4 transport cũng sử dụng giao thức IP tầng 3 để truyền tải dữ liệu. Đó là giao thức UDP (User Datagram Protocol). Nhưng giao thức này không đảm bảo độ tin cậy bằng TCP, mình sẽ nói thêm ở mục sau.&lt;/p&gt;

&lt;p&gt;Tóm lại, các giao thức ở tầng này hầu hết có nhiệm vụ đảm bảo dữ liệu được truyền tải đến “đúng” các ứng dụng đang chạy trên các nút đó.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tầng 5: Application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Giao thức phổ biến ở tầng này là HTTP (cho phép chúng ta duyệt web), SMTP (gửi/nhận email), etc..&lt;/p&gt;

&lt;h4 id=&quot;tóm-tắt-giải-thích-1-cách-dễ-hiểu-hơn&quot;&gt;Tóm tắt: Giải thích 1 cách dễ hiểu hơn:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/layer-actual.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tầng 1: Chiếc xe tải&lt;/li&gt;
  &lt;li&gt;Tầng 2: Mô tả cách xe tải đi từ giao lộ này đến giao lộ kia.&lt;/li&gt;
  &lt;li&gt;Tầng 3: Xác định đường để đi từ địa chỉ A đến địa chỉ B để giao hàng.&lt;/li&gt;
  &lt;li&gt;Tầng 4: Đảm bảo là tài xế biết cách gõ cửa nhà để biết đến đúng địa chỉ nhà rồi và thông báo ra nhận gói tin.&lt;/li&gt;
  &lt;li&gt;Tầng 5: Chính là nội dung của gói hàng (dữ liệu) !&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;có-thể-bạn-chưa-biết&quot;&gt;Có thể bạn chưa biết?&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Ngoài model 5 tầng còn nhiều model khác. Nổi tiếng nhất là OSI model (7 tầng), khác với loại 5 tầng mà chúng ta học ở chỗ tầng 5 được tách ra 3 tầng.&lt;/li&gt;
  &lt;li&gt;TCP/IP truyền thống chỉ có 4 tầng vì Tầng 1 và tầng 2 được gộp làm 1. Về cơ bản cái truyền thống 4 tầng và 5 tầng hiện nay không khác nhau là mấy.&lt;/li&gt;
  &lt;li&gt;Chúng ta có thể tìm hiểu thêm về OSI Model tại đây:
```
https://www.sans.org/reading-room/whitepapers/standards/osi-model-overview-543&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;https://en.wikipedia.org/wiki/OSI_model&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
## II. Tầng 1 - Các thiết bị mạng cơ bản

### Cable
Dùng để kết nối các thiết bị với nhau và cho phép truyền dữ liệu thông qua nó.

Giúp tạo kết nối mạng đơn giữa 1 điểm với 1 điểm.

Có 2 loại:

* Copper cable: Cat3, Cat5, Cat5e, Cat6,...
![](cooper-cable.png)
	* Các cable đời mới hơn như Cat5e, Cat6 tốt hơn trong việc truyền dữ liệu nhiều hơn và chính xác hơn do chúng có thông số kỹ thuật nâng cao và lõi xoắn của chúng được cấu tạo khác đi để giảm sự xuyên âm (crosstalk- khi mà xung điện trên 1 dây được phát hiện trên 1 dây khác) giúp giảm tình trạng đầu nhận dữ liệu không hiểu được dữ liệu gây ra lỗi mạng.
	* Gửi giao tiếp dữ liệu nhị phân qua dây đồng bằng cách thay đổi điện áp giữa 2 phạm vi. Hệ thống ở đầu nhận dữ liệu sẽ dịch sự thay đổi điện áp này thành dữ liệu nhị phân 0-1. Sau đó từ dữ liệu 0-1 này sẽ được dịch sang các loại dữ liệu khác nhau.
	* Sử dụng áp điện để biểu diễn dữ liệu dưới dạng 0-1

* Fiber optic
	* Sử dụng xung ánh sáng để biểu diễn dữ liệu dưới dạng 0-1.
	* Được dùng ưu tiên cho các môi trường có nhiều nhiễu điện từ.
	* Vận chuyển dữ liệu nhanh hơn, khoảng cách xa hơn mà khó làm mất dữ liệu tiềm ẩn hơn.
	* Đắt và dễ vỡ hơn.
	
	
### Hub &amp;amp; Switch 
Là những thiết bị giúp kết nối các máy tính trong cùng 1 mạng, thường gọi là mạng LAN (mạng cục bộ) 

#### Hub
1 thiết bị bất kỳ trong mạng lưới của hub khi truyền dữ liệu tới hub sẽ kết nối đến tất cả các máy tính khác mà cùng được kết nối với hub. 

![](/assets/images/hub.png) 

Các máy tính nhận dữ liệu có hệ thống riêng để xác định xem dữ liệu đó có đúng là dữ liệu mà nó có nhiệm vụ nhận hay không. Nếu không thì trả về không, nếu có thì thông báo nhận thành công.

Cơ chế này gây ra nhiều tiếng ồn (noise) tạo ra cái gọi là collision domain.

Collision domain:

* Một phân đoạn mạng mà chỉ có 1 thiết bị có thể giao tiếp tại 1 thời điểm.
![](/assets/images/collision.png) 

* Nếu nhiều hệ thống (máy tính) cố gắng gởi dữ liệu cùng 1 lúc, các xung điện được gởi qua cáp (cable) có thể gây nhiễu lẫn nhau.
Khiến cho các hệ thống phải chờ đợi một khoảng thời gian yên tĩnh trước khi cố gắng gửi dữ liệu lần nữa.

&amp;gt; Điều này làm chậm truyền thông mạng nên hiện nay Hub không còn được dùng phổ biến.

### Switch
Mô hình hoạt động tương đối giống Hub, khác biệt ở chỗ:

* Hub ở layer 1, Switch ở layer 2 (Data Link device) 
* Do đó Switch có thể kiểm tra dữ liệu của giao thức Ethernet được gửi đi xung quanh network. 
=&amp;gt; Switch có thể xác định hệ thống (máy tính) nào thuộc về dữ liệu đó mà chỉ gửi thẳng đến hệ thống đó thôi.

![](/assets/images/switch.png)

&amp;gt; Điều này giúp loại bỏ hoàn toàn kích thước của collision domain trong network.
Gíup giảm sự truyền tải lại và tăng thông lượng tổng thể.

### Router
Là thiết bị biết các forward dữ liệu giữa các mạng độc lập với nhau.

![](/assets/images/router.png)

* Hoạt động ở lớp thứ 3 (Network)

* Cũng giống như switch, router có thể kiểm tra dữ liệu IP để xác định địa chỉ cần gửi dữ liệu đến.

* Router chứa 1 số bảng nội bộ chứa các thông tin về định tuyến traffic (lưu lượng truy cập) giữa nhiều mạng khác nhau trên thế giới. Phổ biến là các router gia đình hoặc văn phòng nhỏ. Mục đích của các bộ định tuyến nhỏ này chỉ để lấy lưu lượng truy cập có nguồn gốc từ trong nhà hoặc văn phòng nhỏ sử dụng LAN và chuyển tiếp nó đến ISP (nhà cung cấp dịch vụ Internet)

![](/assets/images/router-isp.png)

* ISP là một loại router phức tạp hơn nhiều, nó sẽ tiếp quản traffic từ router nhỏ. Router này gọi là router lõi, tạo thành xương sống của Internet, chịu trách nhiệm về cách gửi và nhận dữ liệu khắp thế giới mỗi ngày.

* ISP tiếp nhận rất nhiều traffic và phải xử lý việc quyết định nơi nào là nơi gửi traffic này đến. Core router này thường có nhiều kết nối đến nhiều core router khác bằng giao thức BGP (Border Gateway Protocol) giúp chúng tìm hiểu xem đường nào là tối ưu nhất để chuyển lưu lượng truy cập đến.

&amp;gt; Khi bạn mở trình duyệt truy cập đến 1 web server bất kỳ, traffic giữa máy tính và web server có thể đã đi qua hàng chục router khác nhau. 
Các Router là những hướng dẫn viên toàn cầu giúp đưa traffic đến đúng nơi.


## Server và Client

Nodes: là từ dùng để gọi chung cho các thiết bị trong network ở trên, có thể là máy tính, server, client hay router,...

Server: là node có nhiệm vụ cung cấp data cho client, còn được dùng để chỉ mục đích chính của node trên mạng.

Client: là node request data.

Đôi khi 1 node vừa làm server vừa là client. Ví dụ như Email server, vừa cung cấp data về email cho client, mà vừa là 1 client gửi yêu cầu đến DNS server và được DNS trả data về.

=&amp;gt; Hầu hết các thiết bị không hoàn toàn là 1 server hay 1 client, mà đảm nhận 1 trong 2 vị trí trên ở 1 thời điểm.

![](/assets/images/server-client.png)


## III. Tầng 2 - Data Link Layer

### Ethernet 
* Là protocol mạng phổ biến nhất ở tầng 2 để gửi dữ liệu qua các liên kết riêng lẻ. (còn Wi-Fi thì dạng khác)
* Là phương tiện giúp trừu tượng hóa tầng 1 (vật lý hay phần cứng) để các tầng khác có thể dễ tiếp cận sử dụng.
* Chịu trách nhiệm về các thông tin kết nối, liên kết thiết bị để các tầng trên dựa vào. Vì vậy, các tầng trên không cần quan tâm thiết bị được kết nối ra sau, mà chỉ quan tâm tầng dưới gửi dữ liệu gì để xử lý mà thôi.
* Ethernet có 1 kỹ thuật là CSMA/CD (Carrier-sense multiple access with collision detection) giúp nhận biết &quot;collision domain&quot; sóng mang xung đột. 
* CSMA/CD được dùng để quyết định khi nào kênh giao tiếp đang rãnh rỗi trên phân đoạn mạng (network segment) và khi nào 1 thiết bị đang rãnh để truyền dữ liệu.
&amp;gt; Cách hoạt động khá đơn giản, khi có xung đột thì lập tức dừng truyền dữ liệu của các thiết bị gặp xung đột và chờ 1 khoảng thời gian ngẫu nhiên giúp tránh vụ va chạm (random interval trước khi thử gửi lại, và không đồng thời).

* Phân đoạn mạng của tất cả các thiết bị được kết nối sẽ có tất cả thông tin, dữ liệu đang trao đổi. Do đó, ta cần xác định thiết bị nào là nơi dữ liệu cần đến bằng MAC Address. 

### MAC Addresses (Media Access Control Address)

* Là địa chỉ để nhận diện toàn cầu được đính kèm với một network interface cá nhân.
* Giúp nhận dạng các máy tính khác nhau.
* Là một con số **48-bit** thường được biểu diễn bởi 6 nhóm với 2 con số hệ thập lục phân cho mỗi nhóm.
* Nghĩa là sẽ có tối đa 2^48 MAC address.
&amp;gt; Hệ thập lục phân là cách biểu diễn các số sử dụng 16 ký tự. 
![](/assets/images/hexa.png)


* Octet: là 1 cách để tham chiếu số MAC. Trong mạng máy tính, bất kỳ số nào có thể biểu diễn bằng 8 bits được gọi là Octet.
=&amp;gt; 2 chữ số thập lục phân có thể biểu diễn các số tương tự các số được biểu diễn bằng 8 bits.

* 03 Octets đầu tiên của địa chỉ MAC được gọi là OUI (Organizationally unique identifier), được gán cho nhà sản xuất phần cứng riêng lẻ.
=&amp;gt; Từ 3 octets đầu có thể giúp ta xác định được NSX.
* 03 Octets sau được chỉ định theo ý nhà sản xuất mong muốn với điều kiện để mỗi thiết bị sản xuất ra có 1 MAC address duy nhất.
![](/assets/images/mac-1.png)

* Tóm lại, Ethernet protocol dùng MAC address để đảm bảo dữ liệu mà nó gửi có thông tin thiết bị nguồn và thiết bị đích gửi đến. Bằng cách này, dù ở trong một phân đoạn mạng hoạt động như thể có collision domain đơn lẻ, thì các thiết bị luôn biết được khi nào dữ liệu thuộc về nó. 

### Unicast, Multicast &amp;amp; Broadcast frame
#### Unicast
Là sự truyền tải data đến 1 địa chỉ đích duy nhất.

Được nhận diện bằng cách nhìn vào bit ít quan trọng nhất trong octet đầu tiên của địa chỉ MAC đích trong Ethernet frame.

* Nếu là 0 : unicast
* Nếu là 1 : multicast
 
#### Multicast
Là sự truyền tải data đến nhiều địa chỉ MAC đích.

Các thiết bị mạng (network interface) có thể được cấu hình để chấp nhận 1 danh sách địa chỉ MAC được nhận data &amp;amp; giao tiếp trong network cục bộ.

#### Broadcast
Ethernet broadcast address : FF:FF:FF:FF:FF:FF

Broadcast được sử dụng để tất cả các thiết bị có thể hiểu lẫn nhau.

Người gửi sẽ gửi tới tất cả các thiết bị trên mạng LAN.

### Ethernet Frame

* Data-packet: là 1 concept chung để chỉ 1 tập hợp dữ liệu nhị phân được gửi thông qua network link.

* Là 1 tập hợp (data-packet) các thông tin mang tính tổ chức cao, biểu diễn theo 1 thứ tự cụ thể.

* Bằng Ethernet frame, network interface có tại tầng 1 có thể chuyển đổi chuỗi bit qua một liên kết (data link) để cho ra 1 data có ý nghĩa (decode).

![](/assets/images/line-coding.png)

* Các phần trong frame là bắt buộc và có độ dài cố định.

![](/assets/images/ethernet-frame.png)


Thứ tự và các thành phần của Ethernet Frame gồm:

* Preamble (8 bytes): phần mở đầu, chia làm 7 bytes đệm + 1 byte SDF (dùng để làm dấu giới hạn khung bắt đầu, sau nó là khung dữ liệu thực tế).
Phần này được các network interface dùng để đồng bộ hóa các đồng hồ nội bộ mà chúng sử dụng nhằm điều chỉnh speed tại nơi mà chúng gởi dữ liệu.
* Destination MAC Address (48 bits/6 bytes): địa chỉ phần cứng đích, là bên nhận data.
* Source Address (6 bytes):  địa chỉ MAC nguồn.
* VLAN header (4 bytes): nếu trong khung có 4 bytes này thì nghĩa là đây là VLAN frame. Nếu có VLAN, thì sau nó phải có EtherType field. 
&amp;gt; VLAN (Virtual LAN) là kỹ thuật cho phép ta có nhiều LAN hoạt động trên cùng 1 thiết bị vật lý (switch,..). VLAN được sử dụng để tách biệt traffic truy cập khác nhau với các thiết bị cùng mạng kết nối.

![](/assets/images/vlan.png)

* EtherType field (2 bytes): được dùng để diễn giải protocol (giao thức) của nội dung dữ liệu.

* Payload (từ 46-1500 bytes): là data chính cần được vận chuyển, chứa data tầng 3,4,5.

* FCS (4 bytes): viết tắt của Frame Check Sequence, là 1 con số có độ dài 32 bit, biểu diễn checksum value cho toàn bộ ethernet frame.

	* Checksum value: được tính bằng cách biểu diễn chu kỳ kiểm tra dự phòng (CRC) trên frame.

	* Cyclical redundancy check (CRC): là một khái niệm quan trọng đối với tính toàn vẹn dữ liệu (data integrity), và được dùng cho toàn bộ các tính toán học, không chỉ riêng truyền tải network. Đây là 1 phép toán học sử dụng phân chia đa thức để tạo ra 1 con số đại diện cho 1 tập dữ liệu lớn hơn và luôn kết thúc bằng 1 số checksum.

=&amp;gt; Mục đích của checksum là để kiểm tra xem data bên đầu nhận có bị hỏng không.

Quy trình thực hiện:

* Thiết bị sẵn sàng lên frame để gửi đi
* Thiết bị bắt đầu thu thập đủ các thông tin cần có của 1 frame (trừ checksum)
* Thực hiện CRC trên các thông tin đó và gắn số checksum thu được.
* Đưa FCS vào frame hoàn chỉnh.
* Đưa frame vào một data link dùng protocol Ethernet
* Đầu thiết bị bên nhận thu thập các trường dữ liệu nhận được và tính toán lại checksum để so sánh với số checksum của frame gởi.
Nếu không khớp nhau, nó sẽ vứt ra ngoài vì trong quá trình truyền đã khiến data bị hỏng.
=&amp;gt; Và nhiệm vụ của tầng trên sẽ quyết định xem data đó có nên được truyền lại hay không. 
=&amp;gt; Kết luận: bản thân Ethernet chỉ báo cáo cho tầng trên biết về tính toàn vẹn của dữ liệu, chứ không có nhiệm vụ phục hồi dữ liệu.

Cụ thể hình ảnh cho quy trình:
![](/assets/images/CRC.png)
Sau đó đưa vào link và bên nhận nhận được, rồi bên nhận sẽ tính toán lại số checksum:
![](/assets/images/checksum.png)


## IV. Tầng 3 - Network
### IP Address

* Là một con số 32-bit được tạo thành từ 4 octet. Mỗi octet có độ dài 8-bit và biểu diễn dưới dạng số thập phân từ 0 đến 255.

Ví dụ: 12.34.56.78

* Các tổ chức lớn thường sử dụng IP address để xác định máy nào hơn là sử dụng MAC address để truyền tải dữ liệu trong mạng.
=&amp;gt; IP có phân cấp rõ ràng và lưu trữ dữ liệu dễ dàng hơn.

&amp;gt; Ví dụ công ty IBM có octet đầu được cấp riêng là 9. Thì khi router từ sender gửi dữ liệu thấy số 9 ở octet đầu của địa chỉ IP nhận (IP là 9.0.0.1 chẳng hạn), nó sẽ biết là cần gửi đến router của IBM, sau đó router của IBM sẽ tự xử lý phân phối dữ liệu đến các máy tính trong network của IBM thông qua các octet còn lại.

* Lưu ý: IP address thuộc về networks, chứ không thuộc về thiết bị được kết nối với các network.
&amp;gt; Nghĩa là network (mạng) khác nhau sẽ có nhiệm vụ cấp phát IP khác nhau cho thiết bị của bạn bằng công nghệ DHCP khi bạn bật mạng của network đó.


* DHCP hay còn gọi là Dynamic IP Address (địa chỉ IP động) được dùng để cấp phát IP động cho các clients. 
* Static IP Address thì thường được dùng để cấp phát IP tĩnh cho server và các thiết bị mạng (router,...)

### IP Datagrams &amp;amp; Encapsulation
#### IP Datagram
* Là data-packet (gói tin) ở tầng network theo giao thức IP.

* 2 phần chính của IP datagram là header và payload.
![](/assets/images/ip-datagram.png)

Ý nghĩa các trường trong datagram header:

* Version (4-bit): version của Internet protocol.
Ví dụ: IP version 4 thì Internet protocol là IPv4.

*  Header Length (4-bit): ghi số độ dài của header, thường là 20 bytes đối với IPv4. 20 byte cũng là độ dài tối thiểu của IP header.

* Service Type (8-bit): chi tiết về chất lượng dịch vụ, hoặc QoS, các công nghệ áp dụng.

* Total Length (16-bit): tổng chiều dài của IP datagram.
=&amp;gt; Kích thước tối đa là con số lớn nhất có thể biểu diễn bằng 16 bits là 65,535.
=&amp;gt; Nếu kích thước lớn hơn con số tối đa mà network hiện tại cho phép, IP layer sẽ chia làm các data-packet (gói tin/datagram) nhỏ hơn.

* Identification (16-bit): là số 16 bit được dùng để group các messages lại với nhau.
=&amp;gt; Trường này giúp nhóm các gói tin bị tách ra lại với nhau thành 1 phần của đường truyền.

*  Flags (4-bit): chỉ ra rằng datagram này có được phép phân mảng hay không, hoặc đã được phân mảnh chưa. 

* Fragment Offset (12-bit): là quá trình phân mảnh datagram ra các datagram nhỏ hơn (nếu vượt quá giới hạn của network nó đang được truyền đến).

* Time to Live - TTL (8-bit): là trường chỉ ra bao nhiêu bước nhảy để 1 datagram có thể đi đến IP đích trước khi bị vứt đi. Đến số 0 thì router biết được là nó ko cần forward data nữa.
![](/assets/images/TTL.png)
Mục đích của bước này là để đảm bảo khi có cấu hình sai trong router gây ra vòng lặp vô tận như hình:
![](/assets/images/TTL-loop.png)

* Protocol (8-bit): thông tin về transport layer protocol được sử dụng ở gói tin này. (TCP, UDP,...)

* Header checksum (16-bit): số checksum nội dung của toàn bộ IP datagram header.
=&amp;gt; Checksum phải được tính toán lại mỗi lần TTL chạm 1 bộ định tuyến (vì có IP thay đổi)

* Source &amp;amp; Destination IP Address (32-bit) : địa chỉ IP nguồn và IP đích.

* Options: trường tùy chọn được dùng để thiết lặp các đặc tính đặc biệt cho datagram được dùng chủ yếu cho các mục đích testing. Trường này có độ dài biến đổi.

* Padding: thường dùng khi có trường Option. Là chuỗi số 0 để đảm bảo kích thước của header đúng kích thước tổng.


#### Encapsulation
Phần data payload section của Ethernet frame sẽ là toàn bộ IP datagram.

Quá trình gôm các data trong IP datagram lại với nhau thành frame gọi là encapsulation (tương tự payload của Ethernet frame).

* Toàn bộ data của IP datagram được đóng gói lại làm payload cho tầng ngay dưới nó (tầng 2), đó gọi là quá trình encapsulation. Các tầng khác cũng hoạt động như thế.

* Tầng sau đó sẽ dùng toàn bộ payload của tầng trước đó.

![](/assets/images/encapsulation.png)

### IP Address Classes

Là cách xác định cách địa chỉ global IP phân chia không gian.

* Class A: octet đầu là network ID, 3 octet sau là host ID.

* Class B: 2 octet đầu là network ID, 2 octet sau là host ID.

* Class C: 3 octet đầu là network ID, octet cuối là host ID.

![](/assets/images/ip-class.png)

### Address Resolution Protocol (ARP)

Là giao thức được dùng để khám phá địa chỉ MAC của một node với địa chỉ IP tương ứng.

Các thiết bị mạng sẽ lưu giữ 1 bảng ARP local chứa thông tin địa chỉ MAC ứng với IP của các thiết bị mạng đã từng kết nối (trong 1 khoảng thời gian nhất định).

Thiết bị truyền sẽ tìm đến địa chỉ đích bằng cách phát tín hiệu ``broadcast`` FF:FF:FF:FF:FF:FF cho tất cả các máy tính trong mạng local rằng tôi muốn tìm địa chỉ MAC của máy có địa chỉ IP này.

Máy có địa chỉ IP đó sẽ lên tiếng và gửi ARP response chứa địa chỉ MAC lại cho sender (thiết bị truyền).

Giờ thì thiết bị truyền có thể đưa MAC address vào Ethernet frame để truyền tải dữ liệu.

### Subnetting 

Là quá trình tách network lớn thành nhiều network nhỏ hơn gọi là các subnetworks hoặc subnets.

![](/assets/images/subnetting.png)

#### Subnet Mask

* IP: 9.100.100.100

* Subnet mask: 255.255.255.224

* Subnet mask in binary: 11111111 11111111 11111111 11100000

=&amp;gt; 9.100.100.100/27
&amp;gt; Có 27 số 1 (các số 1 này là subnet ID).


![](/assets/images/subnet-id.png)
Hình trên là ví dụ của subnet mask: 255.255.255.0


Subnet mask là cách để máy tính sử dụng toán tử AND để xác định địa chỉ IP đó có tồn tại trên cùng network hay không.


#### CIDR (/ notation)
Là một cách tiếp cận linh hoạt để cung cấp số lượng địa chỉ IP phù hợp với nhu cầu. CIDR cho phép network tự phân chia kích thước.
![](/assets/images/subnet-2.png)

Nó dựa vào subnet để Demarcate (phân định).

Demarcation point là cách để mô tả nơi 1 network hay system kết thúc và cái khác bắt đầu.

Một IP thường có Network ID, Subnet ID, Host ID.
Tuy nhiên với CIDR, Network ID và Subnet ID thường được kết hợp làm một. 

&amp;gt; Nếu công ty cần nhiều hơn 1 class C số lượng địa chỉ IP max mà class C có thể cung cấp (254). Thay vì tạo 2 class C để gấp đôi thì giờ đây với CIDR, nó chỉ cần kết tnoosi không gian địa chỉ liên tục với nhau với mask /23 hay có thể nói là 255.255.254.0.

Giờ đây router chỉ cần biết 1 entry trong routing table để vận chuyển lưu lượng đến các địa chỉ đích thay vì 2.

&amp;gt; Trước đây network ID là tĩnh và chỉ có class A,B,C để phân định kích thước cố định và chỉ có subnet mới có thể thay đổi. Với CIDR thì mọi chuyện đã khác.

![](/assets/images/CIDR-23.png)

Phân tích hình trên 1 chút:

* Hãy nhớ là ta sẽ luôn mất 2 host ID trên mỗi mạng. (giá trị đầu và cuối trong range) 

* Nếu không dùng CIDR, ta cần 2 network class C nên = 254+254
IDR
* /23 nghĩa là thêm được 1 bit cho Host ID = 2^9


### Routing (lộ trình) 
#### Concept

* Định nghĩa Router: Là thiết bị mạng chuyển tiếp traffic phụ thuộc vào địa chỉ đích của traffic đó.
Router thường có 2 network interface giúp nó có thể vận chuyển traffic giữa 2 network với nhau.

![](/assets/images/routing.png)

Lộ trình ở hình trên sẽ được lặp lại cho đến khi traffic đến được địa chỉ đích.

![](/assets/images/routing-2.png)

Diễn giải hình trên như sau:

* Máy tính có IP 192.168.1.100 (máy A) muốn gửi gói tin đến máy có IP 10.0.0.10 (máy B)
* Máy A nằm trong Network A và biết rằng máy B không nằm trong local Network A.
* Máy A gửi gói tin này đến địa chỉ MAC của gateway của nó là Router A có IP gateway là 192.168.1.1.
* Router interface trên Network A nhận được gói tin vì nó thấy địa chỉ MAC đích trên Ethernet frame thuộc về nó. Sau đó, nó bỏ đi phần header của tầng Data-link để đưa đến tầng 3 phân tích tiếp.
* Router sẽ trực tiếp kiểm tra header của IP datagram ở tầng 3. Nó tìm thấy IP đích chính là 10.0.0.10 thuộc về mạng B (10.0.0.0/24) trong Routing Table.
Mạng B có interface kết nối với router này.
* Tiếp theo Router sẽ tạo 1 gói tin mới để gửi cho Network B bằng cách sao chép dữ liệu IP datagram nhưng giảm trường TTL xuống 1 đơn vị + tính toán giá trị checksum mới.
* Sau đó đóng gói IP datagram mới này bên trong 1 Ethernet frame mới với địa chỉ MAC đích là địa chỉ MAC của IP 10.0.0.10 của network B mà nó lưu sẵn trong ARP table.
* Và cuối cùng gói tin sẽ được gửi ra khỏi interface của router trên Network B để đến với máy B.

![](/assets/images/routing-3.png)

* Máy A muốn gửi đến máy C phải thông qua router interface của máy A trên Network B và router interface của máy C trên Network B.
* Cụ thể là máy A sau khi thấy IP đích không thuộc local network thì sẽ gửi đến gateway của nó là Router A thì router A này kiểm tra trong routing table thấy cách nhanh nhất là gửi gói tin đến router B để đến với máy C.
* Sau đó router A sẽ -1 bước nhảy cho trường TTL và gửi cho router B thông qua router interface của router A trên network B và router interface của router B trên network B.
* Do network của máy C được kết nối trực tiếp với router B thông qua router interface thuứ 2 của router B. Nên router B sẽ gửi thẳng gói tin đến máy C trên Network C và kết thúc lộ trình. 

#### Routing table
* Cơ bản nhất sẽ có 4 cột. Trong đó có cột Network. Các cột còn lại có thể là IP, Subnet Mask hay CIDR. 
* Sẽ có từng hàng cho từng Network mà router này biết.
* Khi nhận được gói tin, router sẽ biết IP đích đó thuộc network nào dựa vào routing table của nó.
* Routing table sẽ luôn có 1 mục chung (catchall entry) cho bất kỳ địa chỉ IP nào không có network rõ ràng.

* Next hop: là địa chỉ IP của router tiếp theo sẽ nhận dữ liệu
* Total hops: tổng số bước nhảy còn lại được tính toán đường đi ngắn nhất (sử dụng thuật toán) để đưa gói tin đến đích.

* Các routing table sẽ luôn được update thông tin mới về đường dẫn nhanh nhất đến mạng đích. 

#### Gateway Protocol 
Router sử dụng Routing Protocol để nói chuyện với các Router khác để chia sẻ thông tin với nhau, tìm ra con đường ngắn nhất để chia sẻ gói tin,...

Routing protocol có 2 loại : 
* Interior Gateway Protocol
* Exterior Gateway Protocol

##### Interior Gateway Protocol
Được router sử dụng để chia sẻ thông tin trong 1 hệ thống autonomous đơn (1 tổ chức điều hành mạng).

Autonomous system là tập hợp các Network dưới sự quản lý của 1 nhà điều hành mạng duy nhất. 
&amp;gt; Ví dụ như 1 tập đoàn cần routing traffic mạng của họ giữa các office của họ và mỗi office có thể có 1 local network. Hoặc ví dụ khác là 1 tổ chức nhà mạng lớn của quốc gia quản lý các router thuộc nhà mạng đó.

![](/assets/images/interior-protocol.png)

Interior Gateway Protocol bao gồm 2 loại:

* Distance-vector protocol (tiêu chuẩn cũ)
Router dựa vào danh sách khoảng cách giữa các network trong routing table của router dưới dạng bao nhiêu hops, sau đó gửi danh sách này cho các router lân cận bằng Distance-vector protocol. Do đó các router lân cận có thể đoán được đường đi nào nhanh hơn.
=&amp;gt; Router sẽ được cập nhật routing table thường xuyên.
![](/assets/images/distance-protocol.png)

* Link state routing protocol
![](/assets/images/link-state.png)
Giao thức này có cách tiếp cận tinh vi hơn. Từng router trong autonomous system sẽ broadcast thông tin của nó đến tất cả các router còn lại, và chúng sẽ có hết thông tin của nhau.
Các router sẽ chạy các thuật toán phức tạp để tìm đường đi ngắn nhất đến địa chỉ đích.
Do vậy cần bộ nhớ nhiều hơn và bộ xử lý tốn kém hơn. 

&amp;gt; Khi phần cứng trở nên mạnh mẽ hơn đã khiến giao thức vector trước đó trở nên cũ và lạc hậu.

##### Exterior Gateway Protocol
Được sử dụng bởi các Edge router của tổ chức cần chia sẻ thông tin với các tổ chức điều hành mạng khác.
&amp;gt; Đây là chìa khóa chính của Internet vì Internet là mạng lưới khổng lồ của các autonomous system.

Ở mức cao nhất sẽ có một Core internet router nắm giữ thông tin của các autonomous system. Nhiệm vụ chính của nó là đưa dữ liệu vào Edge Router của các autonomous system.

![](/assets/images/core-router.png)


* Internet Assigned Numbers Authority (IANA) : Là 1 tổ chức giúp quản lý những thứ như phân bổ IP address, ASN,...

* ASN (Autonomous System Number): Là con số thập phân 32-bit định danh cho mỗi autonomous system. ASN không cần phải thay đổi để đại diện cho mỗi autonomous system. 
ASN chỉ thường được dùng bởi các core Internet router và được cập nhật thường xuyên trong routing table để biết mà điều phối traffic.

* Người ta thường nhìn vào ASN để biết autonomous system thuộc về nhà quản trị mạng nào. Ví dụ AS19604 = IBM.

##### Non-routable Address Space 
Cho phép các thiết bị mạng giao tiếp với nhau mà không cần thông qua gateway router. 

* Network address translation (NAT): là loại công nghệ cho phép các không gian địa chỉ mạng không được định tuyến giao tiếp với các thiết bị khác trên internet.

RFC 1918 (Request for comments) đã định nghĩa 3 dải IP không bao giờ được định tuyến trên Internet bên ngoài, mà chỉ có thể được định tuyến bởi các giao thức interior gateway protocol trong local network. Do vậy bất cứ ai cũng có thể sử dụng những IP này cho mạng nội bộ của họ.

![](/assets/images/rfc-1918.png)

## V. Tầng 4 - Transport Layer

Socket number hay còn gọi là Socket port: 10.1.1.23:80

* Nếu muốn request HTTP web page trên con server đang listen IP 10.1.1.23 thì traffic sẽ được direct đến port 80 của con server với IP đó.

* FTP (File transfer protocol) là giao thức cũ dùng để transfer file từ máy này sang máy khác, dùng port 21.


![](/assets/images/layer4.png)

### TCP Segment

Là gói tin bao gồm phần TCP header và payload (data section). Và gói tin này là payload của IP datagram.

![](/assets/images/tcp-header.png)

TCP header gồm 1 số phần quan trọng:
* Sequence number (32-bit): số dùng để xác định vị trí của gói tin trong sequence gồm các TCP segment.
&amp;gt; Do tầng 3 có giới hạn size là 1,518 bytes nên cần phải tách các gói tin ra, TCP chia data thành nhiều segment để gửi cho tầng 3. Vậy nên số này dùng để xác định segment hiện tại là segment nào trong sequence của 1 gói tin lớn đã được tách ra.
* Acknowledgment number (32-bit): là số tiếp theo sau sequence number.
* Checksum: Khi gói tin đã nhận được ở đầu nhận, nó sẽ được tính toán checksum lại để so sánh với checksum ở header này.
* Urgent pointer field: gắn liền với TCP control flag để chỉ ra segment nào quan trọng hơn các segment còn lại trong sequence.

### Control Flags
Là 1 số 6 bit, mặc định 000000 theo thứ tự như bên dưới:

* URG (Urgent): nếu bit này là 1, chỉ rằng segment này là khẩn cấp và trường Urgent pointer field sẽ có nhiều thông tin hơn để lý giải cho flag này.
* ACK (acknowledge): nếu là 1 nghĩa là cần kiểm tra trường acknowledge number trong TCP header
* PSH (push): thiết bị gửi mong muốn thiết bị nhận push các data trong bộ nhớ đệm đến ứng dụng ở phía đầu cuối (vd web browser) càng sớm càng tốt. 
* RST (reset): 1 phía kết nối TCP chưa thể khôi phục lại hoàn toàn sau khi trải qua các segment bị mất thông tin hoặc gặp sự cố.
&amp;gt; Đây là cách mà các TCP khác trong sequence thông báo là &quot;Từ từ tôi chưa thể tổng hợp thông tin từ bạn được&quot;
* SYN (synchronize): gửi tín hiệu yêu cầu động bộ, được sử dụng cho lần đầu thiết lập TCP connection và đảm bảo đầu cuối biết để kiểm tra sequence number field.
* FIN (finish): khi được set là 1 nghĩa là bên máy tính gửi không còn data nào để gửi và kết nối có thể được đóng lại.

### TCP connection
#### The three-way handshake 
Sau khi three-way handshake hoàn tất, TCP connection sẽ được thiết lập.
&amp;gt; Handshake là cách để 2 thiết bị đảm bảo là nó đang nói chuyện trên cùng 1 protocol và có thể hiểu nhau.

![](/assets/images/3way-handshake.png)

Giải thích:
* Máy A gửi gói tin TCP segment gắn cờ SYN cho máy B.
* Máy B phản hồi &quot; Hãy thiết lập kết nối, tôi biết sequence num của bạn rồi&quot;.
* Máy A phản hồi &quot;Tôi nhận tin, hãy bắt đầu gửi data thôi&quot;.


![](/assets/images/2side-tcp.png)

* Cả 2 máy đã được thiết lập TCP connection sẽ vận hành 2 chiều với nhau vì đã pair cùng nhau. Gói tin gửi theo chiều nào cũng được phản hồi =&amp;gt; phía còn lại luôn biết đã nhận được gì.

#### The four-way handshake 
Khi mà 1 trong các máy tính sẵn sàng ngắt kết nối thì nó sẽ gửi cờ FIN, máy tính nhận được sẽ gửi ACK. Nếu máy gửi ACK sẵn sàng ngắt thì cũng gửi nốt cờ FIN. Sau đó máy đòi ngắt sẽ gửi lại cờ ACK &quot;ok tôi ngắt đây&quot;.

![](/assets/images/4way-handshake.png)

### TCP Socket

#### Định nghĩa:
* Socket là khởi tạo (instantiation) của 1 end-point trong kết nối TCP tiềm năng.
* Instantiation là việc triển khai thực tế ở 1 thứ gì đó được định nghĩa ở đâu đó.

=&amp;gt; TCP Socket cần có các chương trình thực để khởi tạo nó. 
=&amp;gt; Bạn có thể gửi dữ liệu đến bất cứ port nào, nhưng bạn chỉ nhận được phản hồi từ server nếu chương trình mở socket ở port đó. 

Các trạng thái của TCP:

* LISTEN : TCP socket đã sẵn sàng và chờ đợi các kết nối vào. (chỉ thấy trạng thái này ở server-side)

* SYN_SENT: có 1 request đồng bộ đã được gửi đi nhưng kết nối chưa được tạo. (chỉ thấy trạng thái này ở client-side)

* SYN-RECEIVED: 1 socket trước đó trong trạng thái LISTEN đã nhận được yêu cầu đồng bộ và đã gửi lại tín hiệu SYN/ACK cho client.

* ESTABLISHED: kết nối TCP đang hoạt động và cả 2 phía đều thoải mái gửi dữ liệu cho nhau. (trạng thái đều có ở cả client và server).

* FIN_WAIT: 1 tín hiệu FIN đã được gửi đi nhưng chưa nhận được ACK từ phía còn lại.

* CLOSE_WAIT: kết nối đã được đóng tại tầng TCP nhưng ứng dụng dùng để mở socket này chưa release socket này.

* CLOSED: kết nối đã chấm dứt và không còn giao tiếp với nhau được nữa.

Ngoài ra còn có các trạng thái TCP khác. Thực tế trạng thái TCP còn phụ thuộc vào hệ điều hành vì nằm ngoài phạm vi của TCP. 

### Connection-oriented protocol (vd TCP)

Là giao thức thiết lập kết nối, sử dụng nó để đảm bảo tất cả các data được gửi đúng. Đảm bảo tất cả segment đều được ACK.

TCP là loại này. TCP sẽ mong đợi từng ACK cho mỗi bit dữ liệu để đảm bảo data truyền tải chính xác và dựa vào sequence number để đưa các gói tin vào đúng thứ tự.

Tầng Transport có protocol này là tầng sẽ quyết định data có cần phải gửi lại không. Còn các tầng 1,2 thì chỉ kiểm tra và vứt gói tin nếu không thỏa checksum.

![](/assets/images/tcp-flow.png)

Do vậy, giao thức này sẽ tốn nhiều chi phí cho việc:
* Tạo connection
* Gửi liên tục các luồng ACK
* Phá vỡ kết nối
=&amp;gt; Chỉ hữu ích khi bạn hoàn toàn muốn dữ liệu được truyền tải chính xác.

### Connectionless protocol (vd UDP - User Datagram protocol)

UDP không phụ thuộc vào connection và cũng không hỗ trợ khái niệm ACK.

Với UDP bạn chỉ cần thiết lập 1 cổng port rồi gửi gói tin đi là được. Điều này hữu ích với các message không quá quan trọng như streaming video.
=&amp;gt; Bằng việc loại bỏ chi phí khi sử dụng TCP, ta có thể tối ưu bằng cách tăng chất lượng video với UDP (giúp tiết kiệm băng thông để dành cho việc truyền data chất lượng cao thay vì dành cho việc thiết lập các kết nối TCP).


### Firewall 

Là thiết bị giúp ngăn chặn traffic truy cập thỏa tiêu chí nhất định để đảm bảo security.

Firewall có thể hoạt động ở nhiều tầng lớp khác nhau, nhưng phổ biến nhất là ở tầng 4 - Transport.
Ví dụ như chặn truy cập đến 1 số port nhất định trong khi cho phép traffic đến các port khác. 

![](/assets/images/firewall.png)

Như hình trên, firewall được đặt trước server để chặn truy cập bên ngoài vào port 445 (phục vụ service quản trị file nội bộ), và cho phép port 80 mở (phục vụ website của công ty) để bên ngoài mạng LAN có thể truy cập vào.

Firewall đôi khi là thiết bị mạng độc lập, hoặc có thể xem nó là 1 chương trình có thể chạy ở bất cứ đâu, nó có thể tích hợp chung với router. Ngoài ra nó có thể chạy trên server cá nhân thay vì là 1 network device, các hệ điều hành lớn hiện nay đều được tích hợp sẵn firewall.  



## VI. Tầng 5 - Application layer 

### Mô hình OSI (Open Systems Intersection) 

![](/assets/images/OSI.png)

* Session Layer: Tạo điều kiện giao tiếp giữa các actual application với tầng transport. Nó là 1 phần của hệ điều hành OS đã được un-encapsulation để lấy &quot;payload&quot; của application từ các tầng dưới và chuyển lên tầng Presention.

* Presentation layer: có nhiệm vụ đảm bảo việc unencapsulation dữ liệu của tầng application layer có thể được hiểu bởi ứng dụng đang yêu cầu nhận dữ liệu.
Đây là 1 phần của OS giúp xử lý mã hóa encryption hoặc nén dữ liệu. 

=&amp;gt; Nhận thấy 3 tầng cuối không còn cơ chế encapsulate dữ liệu nữa nên được gộp lại thành mô hình 5 tầng và được xem là hiệu quả nhất. Tuy nhiên, việc hiểu rõ cơ chế hoạt động và mô hình nguyên thủy sẽ giúp ta có kiến thức cơ bản để hiểu về network tốt nhất.


Dưới đây là mô phỏng quy trình network truyền tải dữ liệu từ máy 1 đến máy 2:

![](/assets/images/all-layers.png)

Máy 1 sẽ truyền data payload kèm sign SYN/ACK và máy 2 trả về SYN/ACK cứ thế cho đến khi cả 2 hoàn thành nhiệm vụ gửi nhận dữ liệu. 


-------------------------------
#### DNS
Địa chỉ IP là 1 số binary 32-bit nhưng được viết dưới dạng thập phân để dễ đọc hơn.

Vì não người nhớ số không tốt nên DNS ra đời để giúp giải quyết vấn đề truy cập địa chỉ IP dễ dàng hơn, con người chỉ cần nhớ domain bằng chữ.

* DNS là dịch vụ mạng toàn cầu giúp giải mã chữ thành địa chỉ IP cho bạn.

* Domain name là thuật ngữ ta dùng để chỉ những gì DNS có thể xử lý.

Địa chỉ IP ứng với tên miền có thể thay đổi vì nhiều lý do như thay đổi hợp đồng, trụ sở data center. Bằng cách sử dụng DNS, quản trị viên có thể thay đổi IP ứng với tên miền, lúc này end user thậm chí sẽ không bao giờ biết là IP đã thay đổi.

=&amp;gt; Lợi ích của DNS:

* Giúp dễ nhớ đường dẫn trang web thông qua Domain name hơn
* Cho phép thay đổi quản trị ngầm mà không cần end user thay đổi hành vi.
* DNS cho phép đối ứng domain name theo vùng. Ở vùng A thì có địa chỉ IP x ở vùng B thì địa chỉ y. Giúp lưu lượng truy cập máy chủ ở gần khu vực khi mà công ty bạn muốn đặt data center ở vùng nào đó để truyền dữ liệu gần nhau nhanh hơn.

![](/assets/images/dns.png)
  

Để cấu hình 1 mạng tiêu chuẩn, có 4 thứ cần cấu hình để host vận hành trong mạng như mong muốn:
* IP address
* Subnet mask
* Gateway for a host
* DNS server

Có 5 loại DNS server:
![](/assets/images/dns-server.png)

* Caching and recursive name servers:
Mục đích để lưu các tra cứu domain name trong 1 khoảng thời gian nhất định. Loại này thường được ISP hoặc local network cấp phát.
Hầu hết các caching name server thường là recursive name server.

* Recursive name servers: thực thi đầy đủ yêu cầu đối ứng tra cứu toàn bộ (full resolution) DNS.

Hầu hết các local name server sẽ thực hiện nghĩa vụ của cả 2 loại, nhưng hoàn toàn có thể có trường hợp name server làm 1 trong 2 nhiệm vụ caching hoặc recursive thôi. 


![](/assets/images/name-server.png)

Khi Friend yêu cầu local name server cung cấp IP của fb.com thì recursive server sẽ thực thi full resolution tra cứu toàn bộ trên máy chủ dịch vụ DNS để trả về IP. Sau đó IP này sẽ được lưu trữ trong cache với trong khoảng thời gian TTL nhất định.

Vài phút sau nếu You truy cập cùng fb.com thì local name server sẽ trả về máy tính của You địa chỉ IP tương tự mà không cần tra cứu toàn bộ.

* TTL (Time to live): là giá trị bằng giây có thể được cấu hình bởi chủ của tên miền, là thời gian mà name server cho phép cache trước khi nó bị hủy và thực thi tra cứu lại DNS (full resolution).


##### Full recursive resolution:

![](/assets/images/full-resolution.png)

Name server đã cấu hình sẽ thực hiện tra cứu toàn bộ DNS theo quy trình sau:

* B1: liên hệ với root name server. Chúng chịu trách nhiệm điều hướng truy vấn tên miền đến TLD server thích hợp.

Ngày nay chúng thường phân bố trên toàn thế giới thông qua ``anycast``. Đây là 1 kỹ thuật được sử dụng để điều hướng truy cập đến các destination khác nhau dựa trên yếu tố địa lý, tắc nghẽn (congestion) hoặc link health.  13 root name servers được xem như 13 object được cấp quyền để cung cấp dịch vụ tra cứu tên router.

Root server sẽ trả về địa chỉ của TLD name server (Top Level Domain), trong ví dụ là ``.com``. 
![](/assets/images/TLD.png)

* B2: TLD name server sẽ tra cứu máy chủ nào được cấp quyền cho trang web ví dụ domain ``weather.com``, đó là 1 tổ chức chạy trang web này. 

* B3: Sau đó tra cứu DNS sẽ tiếp tục được điều hướng đến máy chủ được cấp quyền domain name ``weather.com``, nơi sẽ cho ra IP thật của server cần truy vấn/cần request data. 


#### DNS over Protocol (TCP, UDP)
##### TCP
Thường không dùng TCP, chỉ dùng khi gói tin lớn. Khi gói tin quá lớn UDP không chứa được hết thì DNS server sẽ phản hồi quá lớn. Lúc này DNS Client sẽ thiết lập TCP connection để tra cứu.

![](/assets/images/tcp-dns.png)


##### UDP
Không cần tạo các kết nối như TCP. 
![](/assets/images/udp-dns.png)

UDP không có cơ chế khôi phục lỗi. Nhưng đơn giản nếu khi phát sinh lỗi, DNS chỉ cần request lại nếu không nhận được phản hồi, không cần phải khôi phục.


##### Resource Record Type 

DNS hoạt động dựa trên 1 tập hợp các record. Có nhiều loại record phục vụ các mục đích khác nhau:

* ``A record``: được dùng để trỏ 1 tên miền đến 1 địa chỉ IPv4 nhất định.
Cơ bản thì 1 domain name sẽ trỏ đến 1 bản ghi chứa địa chỉ IPv4, nhưng thực ra 1 domain cũng có thể trỏ đến nhiều bản ghi A.
=&amp;gt; Kỹ thuật ``DNS Round Robin``được sử dụng để cân bằng lưu lượng truy cập trên nhiều IP. 

Ví dụ www.microsoft.com có thể cấu hình 4 A records ứng với 4 name servers có thẩm quyền cho tên miền này. Sau đó từng lượt truy cập sẽ được điều hướng đến IP của name server lần lượt theo cơ chế round robin (thay đổi thứ tự đầu tiên) giúp giảm traffic. Máy tính phân giải DNS biết cả 4 record nhưng nó chỉ dùng record thứ tự đầu tiên, trường hợp kết nối thất bại nó sẽ kết nối tới record tiếp theo.

* ``AAAA-Quad A``: tương tự A record nhưng trả về địa chỉ IPv6 thay vì IPv4.

* ``CNAME record``: được sử dụng để chuyển hướng traffic từ 1 domain sang 1 domain khác.
Vd: nếu bấm microsoft.com thì CNAME được cấu hình trước đó sẽ phân giải thành www.microsoft.com và DNS server sẽ phân giải tiếp ra IP của www.microsoft.com

CNAME còn giúp thay đổi địa chỉ IP của 1 máy chủ ở 1 nơi thôi.

=&amp;gt; Có 2 cách để khi bấm microsoft.com và www.microsoft.com đều đến cùng 1 nơi:

	* C1: Thiết lập record tương tự nhau cho cả 2 domain. Nếu thay đổi IP thì phải thay đổi cho cả 2 nơi của record.
	* C2: Setup CNAME trỏ microsoft.com đến www.microsoft.com, khi cần thay đổi IP chỉ cần thay đổi domain chính www.microsoft.com.

* ``MX record - mail exchange``: đảm bảo traffic thư từ sẽ được gửi đến mail server của công ty.

* ``SRV record``: giống MX nhưng khác chỗ là nó có thể trả về các record dịch vụ khác nhau như calendar.

* ``TXT record``: giúp ta có thể chèn các note vào trong message gửi đi hoặc cấu hình network. TXT record thường được sử dụng để truyền tải thông tin bổ sung đến email dưới dạng NCC dịch vụ ví dụ &quot;Mail Delivery Failure&quot;,...

* Ngoài ra còn các bản ghi NS hoặc SOA được sử dụng để xác định thông tin thẩm quyền về các DNS Zone.


#### Anatomy of a Domain name

* ICANN là tổ chức tiền thân của IANA, cả hai cùng phối hợp để quản lý việc cấp phát và điều phối IP + DNS + TLD của Internet toàn cầu.

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;www.google.com&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Trong đó chia làm các vùng sau:

* ``.com``: phần TLD
* ``google``: phần Domain 
* ``www``: phần sub-domain 
=&amp;gt; Tất cả là Fully qulified Domain name (FQDN)

Registrar là các công ty có thỏa thuận với ICANN để cấp phát/bán domain name chưa đăng ký cho bất kỳ ai.

* Mỗi vùng domain phải &amp;lt;=63 ký tự.
* FQDN thì tối đa 255 ký tự.
* DNS support tối đa 127 level domain trong 1 FQDN.


##### DNS Zones
Ra đời để cho phép kiểm sóat nhiều level của domain name một cách dễ dàng hơn.

![](/assets/images/dns-zone.png)

Như hình ta sẽ có 4 cấu hình DNS server sẽ được thiết lập. 1 cho domain chính và 3 cái còn lại cho subdomains.

Chúng sẽ được cấu hình thông qua ``Zone files``.

* ``Zone files`` là những tệp tin cấu hình đơn giản khai báo tất cả các record của 1 zone nào đó.
Zone file phải bao gồm SOA (Start of Authority).
* SOA sẽ khai báo zone và tên của name server được cấp quyền để khai báo zone.
* NS record cũng có thể xuất hiện trong file để khai báo những name server khác có thể chịu trách nhiệm cho zone này.
* Ngoài ra cũng có thể xuất hiện các record A, AAAA, CNAME trong zone file.

Ngoài việc tra cứu từ domain sang IP trong record. Ta còn sẽ bắt gặp kỹ thuật Resolve lookup zone file cho phép DNS server yêu cầu IP và trả về FQDN cùng với nó, dùng PTR record.

* ``PTR`` (Pointer resource record) : phân giải IP thành name 



### DHCP

Để cấu hình 1 mạng tiêu chuẩn cần có IP address, Subnet mask, Gateway, Name server.

Trong đó chỉ có IP là cái khác nhau cho mỗi node, còn lại thì hầu như cố định cho các node trong 1 mạng.

=&amp;gt; DHCP ra đời để giúp cấu hình network cho OS máy bạn, giúp phân bổ IP

* DHCP là protocol ở tầng application giúp tự động hóa việc cấu hình mạng cho các host trong network.
Một node trong mạng sẽ truy cập DHCP server để truy vấn IP và sẽ nhận được toàn bộ cấu hình chuẩn gồm 4 cái trên.

Các máy client được assign bất kỳ trong 1 dải quy định.
Các thiết bị khác như router hay DNS server,... cần IP tĩnh để dễ diagnose khi gặp sự cố.

#### DHCP discovery 
Là quá trình client cấu hình sử dụng DHCP để có được thông tin cấu hình network.

#### Quy trình DHCP cấp phát IP 
* Client gửi thông báo broadcast tìm kiếm DHCP (gọi là DHCP discover message)
![](/assets/images/DHCPdiscover.png)
* DHCP server sẽ kiểm tra cấu hình của client để quyết định IP nào sẽ cấp. Tùy thuộc vào static hay dynamic hay fixed.
* DHCP server sẽ phản hồi broadcast bằng DHCPOFFER message và trong msg có địa chỉ MAC của destination address.
![](/assets/images/DHCPoffer.png)
* Client có thể từ chối cấp phát IP từ 1 máy chủ DHCP bất kỳ trong mạng. Client sẽ phản hồi broadcast bằng DHCPREQUEST nói rằng ok đến DHCP server. Vì chưa có IP nên client sẽ mặc định gửi từ 0.0.0.0.

![](/assets/images/DHCPrequest.png)
* Sau đó DHCP server sẽ phản hồi broadcastr xác nhận bằng DHCPACK.
![](/assets/images/DHCPack.png)

* Client nhận message và bắt đầu thiết lập cấu hình network cho OS máy tính theo message nhận được.

#### DHCP lease 
Là hạn thời gian được sử dụng cấu hình cấp bởi DHCP. Hết thời gian này thì client phải thực hiện lại quy trình trên.

Ngoài ra, client cũng có thể setup thời gian lease của nó để ngắt kết nối network đến DHCP server thông qua cách tắt mạng tự động. Điều này sẽ trả địa chỉ IP của client về danh sách IP có thể cấp phát của DHCP.

### NAT (Network Address Translation)
Là kỹ thuật cho phép gateway thường là router hay firewall rewrite IP source của 1 IP datagram đi ra network ngoài trong khi vẫn lưu giữ lại IP ban đầu để rewrite lại sau khi nhận được response từ các service ở network ngoài.

Router thông thường chỉ nhận IP diagram kiểm tra trừ TTL 1 đơn vị, tính lại checksum.
Khi có NAT thì nó sẽ rewrite lại IP.

![](/assets/images/NAT.png)

IP soure từ máy 1 khi hiển thị với máy 2 sẽ là IP gateway của router ở máy 2. 

&amp;gt; NAT sẽ giúp bảo vệ, ẩn IP của máy 1 khi gói tin đến với máy 2 và sẽ viết lại IP chính xác của máy 1 khi router nhận được response từ máy 2.

Về mặt security, không ai có thể thiết lập kết nối với máy tính của bạn nếu họ không biết địa chỉ IP. Đây gọi là ``IP masquerading`` (giả mạo IP) và là khái niệm bảo mật quan trọng. 

#### NAT và Transport layer
##### Port preservation
Là kỹ thuật mà source port được chọn bởi máy client sẽ giống với port dùng bởi router.
![](/assets/images/port-preservation.png)

Outbound connection chọn ngẫu nhiên 1 ephomeny source port hoặc trong dải 49152 đến 65535.

Lúc này router NAT chỉ cần lưu lại source port để trả response về đúng máy tính đã gửi msg đi.

##### Port forwarding
Là kỹ thuật mà destination port cụ thể có thể được cấu hình để luôn được chuyển đến node cụ thể nào đó.
 
![](/assets/images/port-forwarding.png)

Ví dụ trong network công ty có nhiều node (server) làm nhiều nhiệm vụ/service khác nhau. Các máy tính bên ngoài không cần biết IP của các service này là gì mà chỉ cần IP gateway của router kết nối đến network đó + destination port của service.

Với port forwarding, traffic của 2 service có thể trả về cho cùng 1 IP mạng ngoài (gateway) và sẽ có cùng DNS name. Nhưng ngược lại, response có thể được trả về đến những internal server khác nhau nhờ các destination port khác nhau.

&amp;gt; Kỹ thuật này giúp giả mạo IP (IP masquerading) và giúp người dùng bên ngoài tương tác với nhiều dịch vụ chạy trong cùng 1 tổ chức.

##### NAT và Non-Routable Address Space
Kể từ khi IANA đảm nhận phân bổ IP trên toàn cầu với số lượng có sẵn là 4,2 tỷ IPV4 thì đến khoảng từ năm 2010, các RIRs bắt đầu cạn kiệt IPv4.

*RIRs là 5 lãnh thổ được IANA phân chia quản trị IPv4.
    AFRINIC, which serves the continent of Africa

    ARIN, which serves the United States, Canada and parts of the Caribbean

    APNIC, which is responsible for most of Asia, Australia and New Zealand and Pacific Island nations

    LACNIC, which covers Central and South America and any parts of the Caribbean not covered by ARIN

    RIPE, which serves Europe, Russia,the Middle East, and portions of Central Asia
    

&amp;gt; IPv6 sẽ giúp giải quyết vấn đề cạn kiệt IPv4, tuy nhiên để biến IPv6 phổ biến toàn cầu cần có thêm thời gian.


Trong thời gian này, chúng ta sẽ dùng NAT và Non-Routable Address Space làm giải pháp tạm thời.
Điều này sẽ giúp cho hàng ngàn máy tính chỉ cần dùng 1 public IPv4 là IP gateway của router thông qua kỹ thuật NAT ở trên, giúp gửi nhận msg bình thường qua internet.

![](/assets/images/limitIPv4.png)

Cho đến khi IPv6 được sử dụng phổ biến, ta phải dùng kỹ thuật này để giải quyết tạm thời vấn đề cạn kiệt IPv4.

Tham khảo thêm tại: https://en.wikipedia.org/wiki/IPv4_address_exhaustion

### VPN &amp;amp; Proxies
#### Virtual Private Network
* Là công nghệ giúp mở rộng private hoặc local network ra các host mà không nằm trong network đó.
* Là tunelling protocol. Thiết lập VPN connection là thiết lập VPN tunnel.
![](/assets/images/vpn.png)
&amp;gt; Phổ biến nhất là dùng cho nhân viên truy cập vào mạng công ty để xem/sử dụng resource tại nhà.

Quy trình:

* Nhân viên sử dụng VPN client để thiết lập tunnel đến mạng công ty. Nó giúp tạo 1 interface ảo để được cấp phát IP trong mạng công ty.
* Lúc này client sẽ được cấp 1 IP trong mạng công ty.
* Vậy là từ lúc này client có thể access resource của công ty bằng cách gửi message đi thông qua IP interface ảo này như thể đang kết nối mạng private của công ty.

Hầu hết VPN hoạt động bằng cách sử dụng phần payload của Transport layer.
![](/assets/images/vpn2.png)

* Phần payload của message gửi từ client sẽ được mang đến VPNs end point nơi mà tất cả các layer khác trừ network, transport và application bị bỏ đi.
* Phần payload lúc này sẽ được mã hóa để lại VPN server.
* Sau đó phần payload sẽ được encapsulated với data link layer đúng thông tin và gửi ra đâu đó như thể từ private network của công ty.

##### Two-factor authentication
Là kỹ thuật dùng nhiều hơn username và password để authenticate.

Thông thường người ta dùng mã token được generate bởi người dùng thông qua 1 phần cứng hay phần mềm chuyên dụng nào đó.

![](/assets/images/vpn2.png)

Ngoài ra, người ta thường dùng VPN để thiết lập ``tunnel`` giữa 2 network của 2 tòa nhà với nhau (site-to-site connectivity) thông qua việc kết nối router hoặc thiết bị VPN chuyên dụng trên 1 mạng đến 1 router trên mạng khác.
&amp;gt; Từ đó network của 2 toà nhà có thể truy cập resource của toà nhà còn lại mà ko bị chặn.

Tóm lại, VPN là 1 công nghệ tạo tunnel mã hóa để cho phép remote network hoặc 1 máy tính hoạt động như thể nó được kết nối vật lý đến 1 network nào đó.

#### Proxies 
Dịch vụ proxy là 1 server đại diện cho client để access 1 service khác. 
Nó ngồi giữa client và các servers khác.

1 số lợi ích của proxy:
* Anonymity: ẩn danh
* Security: bảo mật
* Content filtering: lọc nội dung
* Increased performance: tăng hiệu suất

Gateway router là 1 ví dụ cho proxy. Proxy là khái niệm trừu tượng và nó hiện diện ở bất cứ layer nào.

##### Web proxy
* Lúc trước dùng để caching data giúp truy xuất lại nhanh hơn vì web proxy là cái sẽ đại diện cho client để truy xuất data từ service. Thời nay ít được dùng vì các tổ chức có khả năng xử lý mạnh mẽ nên không cần nữa. 


* Hiện nay web proxy được sử dụng để ngăn chặn 1 ai đó truy cập vào các trang web. 
Ví dụ: công ty chặn nhân viên vào facebook trong giờ làm việc để tăng năng suất.
![](/assets/images/web-proxy.png)

##### Reverse proxy
Là 1 dịch vụ như là 1 server độc lập nhưng thực chất đại diện cho nhiều server đằng sau nó.

Ví dụ: 

* Tất cả traffic sẽ được kết nối đến 1 máy chủ web server của Twitter (gọi là reverse proxy) sẽ có nhiều web server sống phía sau nó để giúp quản lý số lượng lớn các request.

Proxy server sẽ phân phối đến các app server theo hình thức Round robin để đảm bảo load balancing như DNS.

 ![](/assets/images/reverse -proxy.png)
 
* Một ứng dụng khác là để giải mã. Lúc này các application server chỉ cần phục vụ việc show web, còn lại proxy server lo. 


### Một số định nghĩa khác cần nắm:

* ``Traceroute`` và ``mtr``: là 1 tính năng cho phép thấy đường đi giữa 2 nodes, và cho thông tin về mỗi hop trên đường đi.
Nó dùng kỹ thuật thông minh tại TTl field ở IP level. Đặt TTL đầu tiên là 1 và tăng dần giúp xác định lỗi nằm ở bước hop nào.
 ![](/assets/images/traceroute.png)
 
 Traceroute ở mỗi bước sẽ gửi 3 gói tin, số đầu mỗi dòng là số thứ tự hop. 
  ![](/assets/images/traceroute2.png)
 
 ``mtr`` cũng tương tự nhưng chạy thời gian thực và thấy rõ hơn các thay đổi, liên tục cập nhật data tổng hợp được về traceroute.
 
* Netcat/Test-NetConnection: để xem tầng transport có đang hoạt động không.
Cú pháp: ``nc host port``

Cách hoạt động: câu lệnh sẽ cố thiết lập kết nối tới port X của webserver (gửi data từ tầng app đến listening service).
	* Nếu kết nối thành công: 1 con trỏ nháy đầu dòng xuất hiện đợi input.
	* Nếu kết nối thất bại: câu lệnh sẽ dừng.

=&amp;gt; Nếu muốn không cần input chỉ để biết trạng thái thì thêm flag ``-z `v`` nghĩa là Zero input/output mode và verbose.

* Name resolution tool: 
``nslookup &amp;lt;webserver_optional&amp;gt;`` để trả về  record tra cứu lỗi.
&amp;gt;Hoặc có thể nhập nslookup rồi nhập tiếp trong env của nó. Ví dụ:
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;webserver
set type=MX (loại tài nguyên)
set debug (thêm chi tiết)
```&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Public DNS server: là các name server được thiết lập đặc biệt để bất cứ ai cũng có thể sử dụng miễn phí. Ví dụ 8.8.8.8 và 8.8.4.4 của Google&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lưu ý dùng của các công ty uy tín tránh bị attack. Nếu không phải debug thì nên dùng name server cung cấp bởi ISP của bạn.
&lt;img src=&quot;/assets/images/DNS-attack.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DNS Registration &amp;amp; expiration
Registrar là 1 tổ chức có nhiệm vụ giao domain name cho tổ chức hoặc cá nhân.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mua domain name:
	* Đăng ký tài khoản trên trang của registrar
	* Tìm tên miền muốn mua
	* Đồng ý với số tiền và thời hạn sử dụng
	* Thanh toán
	* Ghi nhớ HSD mà gia hạn trước thời gian hết hạn.&lt;/p&gt;

&lt;p&gt;Ngoài ra ta có thể transfer domain giữa các registrar và cá nhân:
&lt;img src=&quot;/assets/images/transfer-domain.png&quot; alt=&quot;&quot; /&gt;
	* Bên nhận generate 1 chuỗi ký tự độc nhất để gửi cho bên transfer.
	* Bên transfer sẽ ghi cùng chuỗi ký tự đó trên 1 text record được cấu hình trong DNS setting để xác nhận là họ sở hữu domain này và được phép transfer.
	* Hai bên chấp thuận trao đổi quyền sở hữu.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Host files
Là flat file chứa trên mỗi dòng, 1 địa chỉ network đi theo bởi host name.
Nói cách khác nó cho phép máy tính cá nhân cho rằng 1 tên miền luôn trỏ vào 1 IP cụ thể.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ví dụ: 1.2.3.4 webserver&lt;/p&gt;

&lt;h3 id=&quot;interview-sample&quot;&gt;Interview sample&lt;/h3&gt;

&lt;p&gt;Tình huống: nhân viên nội bộ truy cập URL nội bộ của công ty gặp lỗi “Trang không hiển thị được”.&lt;/p&gt;

&lt;p&gt;Quy trình debug có thể tham khảo như sau:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Hỏi xem thông báo lỗi là gì.&lt;/li&gt;
  &lt;li&gt;Hỏi xem người khác có vào được ko.&lt;/li&gt;
  &lt;li&gt;Xin tên web để thử tra cứu trên máy mình.&lt;/li&gt;
  &lt;li&gt;Nói user thử truy cập trang web khác.&lt;/li&gt;
  &lt;li&gt;Hỏi user dùng os nào và hướng dẫn nhập lệnh ifconfig. Kết quả là 1 loạt các thông số sau:
```&lt;/li&gt;
  &lt;li&gt;IP: là 1 địa chỉ duy nhất được cấp cho máy tính để giao tiếp trên Internet với các máy tính khác.&lt;/li&gt;
  &lt;li&gt;Default gateway: như 1 điểm truy cập được máy tính sử dụng để chia sẻ thông tin với 1 máy tính khác hoặc trên Internet, có thể xem như là 1 router.&lt;/li&gt;
  &lt;li&gt;DNS: là domain name system dịch domain name thành IP.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DHCP: giúp tự động cấp địa chỉ IP cho máy tính và gửi cấu hình mạng cho máy tính.
```
=&amp;gt; phát hiện IP range của network là 172.x.x.x nhưng IP của máy tính lại là 192.x.x.x.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hỏi xem máy tính có dùng DHCP không? (nên dùng để tự động cấp phát)
=&amp;gt; Có thể do mình cấu hình IP tĩnh cho máy nên không truy cập được, cần vào DHCP settings để điều chỉnh cho gán tự động.
=&amp;gt; Cũng có thể DHCP cấu hình sai hoặc kết nối với mạng sai nên địa chỉ IP bị sai range.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Hỏi xem đang kết nối mạng dây hay không dây. Nếu laptop hay điện thoại thì không dây (wi-fi).
=&amp;gt; Kiểm tra wifi đang kết nối mạng nào, có phải mạng công ty không.
=&amp;gt; Lỗi do kết nối mạng ngoài đường không phải mạng công ty.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tóm lại, luôn tìm ra lỗi nằm ở đâu trước khi vào sửa nó.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Oct 2021 00:00:00 +0700</pubDate>
        <link>https://tuyen-nnt.github.io/network/</link>
        <guid isPermaLink="true">https://tuyen-nnt.github.io/network/</guid>
        
        
        <category>Network</category>
        
      </item>
    
      <item>
        <title>Setup Airflow cơ bản cần biết</title>
        <description>&lt;p&gt;Các bước set-up:
https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lỗi khi run database migrations and create the first user account:
&lt;code&gt;docker-compose up airflow-init&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;https://github.com/Mailu/Mailu/issues/853&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Do docker-compose chưa update&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Kết quả:&lt;/p&gt;

&lt;p&gt;DB_HOST=postgres
DB_PORT=5432
DB: postgresql+psycopg2://airflow:***@postgres/airflow&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sau khi &lt;code&gt;docker-compose up&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Success. You can now start the database server using:
&lt;code&gt;pg_ctl -D /var/lib/postgresql/data -l logfile start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Build custom image tại :
https://airflow.apache.org/docs/docker-stack/build.html&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cách tạo và import package trong Python:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ví dụ trong link là import package &lt;code&gt;airflow_operators&lt;/code&gt;. 
https://airflow.apache.org/docs/apache-airflow/stable/modules_management.html&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thêm thư mục đường dẫn vào &lt;code&gt;sys.path&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;VD: PYTHONPATH=/home/arch/projects/airflow_operators python&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dùng Macros nhưng phải cài Jinja Templating trước:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;https://airflow.apache.org/docs/apache-airflow/stable/macros-ref.html&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;*Args và **kwargs:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;https://realpython.com/python-kwargs-and-args/&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Sep 2021 00:00:00 +0700</pubDate>
        <link>https://tuyen-nnt.github.io/airflow/</link>
        <guid isPermaLink="true">https://tuyen-nnt.github.io/airflow/</guid>
        
        
        <category>Data</category>
        
      </item>
    
      <item>
        <title>Tìm hiểu về Data Analysis</title>
        <description>&lt;p&gt;Bài viết này sẽ hướng dẫn các bước cơ bản:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Tìm data phù hợp rồi collect chúng&lt;/li&gt;
  &lt;li&gt;Đọc data trong môi trường dev&lt;/li&gt;
  &lt;li&gt;Chuẩn bị phân tích bằng cách cleaning và validation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-reading-data&quot;&gt;1. Reading data&lt;/h2&gt;

&lt;p&gt;Dùng pandas để đọc các format phổ biến như CSV, Excel, HDF5,…&lt;/p&gt;

&lt;h2 id=&quot;2-columns-và-rows&quot;&gt;2. Columns và Rows&lt;/h2&gt;
&lt;p&gt;####df.shape&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;in ra (n, m) với n là số row và m là số column&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;####df.columns&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;in ra list các column ở định dạng string&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dataframe giống như Dictionary khi variable name là key (tên cột) còn các giá trị trong row là values. Do đó bạn có thể select column dùng &lt;code&gt;df[&quot;key&quot;]&lt;/code&gt;. Kết quả là 1 &lt;strong&gt;Series&lt;/strong&gt; các value của cột đó. Dtype của nó là &lt;code&gt;float64&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;**Lưu ý: NaN là là giá trị đặc biệt chỉ định value không hợp lệ hoặc bị thiếu. **&lt;/p&gt;

&lt;h2 id=&quot;3-clean-và-validate&quot;&gt;3. Clean và Validate&lt;/h2&gt;

&lt;p&gt;Đây là bảng data chứa cân nặng của baby ta dùng trong các ví dụ sắp tới:
&lt;img src=&quot;/assets/images/example-data.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Đầu tiên ta rút trích mỗi cột mà ta muốn phân tích lưu vào 1 biến:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;pounds= df[&quot;tên cột&quot;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ounces= df[&quot;tên cột&quot;]&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ta xem có value gì xuất hiện trong cột mà ta muốn phân tích và mỗi value xuất hiện bao nhiêu lần:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;pounds.value_counts().sort_index()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/value-count.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mặc định kết quả sort theo giá trị nào gặp nhiều nhất. Nên ta thêm &lt;code&gt;sort_index()&lt;/code&gt; để nó sort theo giá trị.&lt;/p&gt;

&lt;p&gt;=&amp;gt; Sau đó ta quay lại xem bảng data ban đầu để thấy sự hợp lý. Ta có thể kết luận data này đúng và chúng ta đang phân tích đúng.&lt;/p&gt;

&lt;h4 id=&quot;seriesdescribe&quot;&gt;Series.Describe()&lt;/h4&gt;
&lt;p&gt;Ta cũng có thể dùng attribute describe để có bảng thống kê mean, phương sai, min và max rồi kết luận như trên.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pounds.describe()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/describe.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Giải thích bảng trên:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;50% : giá trị trung vị =7&lt;/li&gt;
  &lt;li&gt;mean: trung bình =8, do có chứa các giá trị đặc biệt ít gặp như quá cao hay quá thấp nên không có ý nghĩa lắm.
Do vậy, trước khi đưa vào tính toán mean thực sự, ta phải thay thế những giá trị đặc biệt trên bằng NaN (thuộc thư viện numpy) để nó có nghĩa là data này bị mất đi giúp không ảnh hưởng đến số liệu phân tích chung của chúng ta.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;seriesreplace&quot;&gt;Series.Replace()&lt;/h4&gt;

&lt;p&gt;Tham số đầu tiên là list các giá trị ta muốn replace.&lt;/p&gt;

&lt;p&gt;Tham số thứ 2 là giá trị mà ta muốn được replace thành.&lt;/p&gt;

&lt;p&gt;Tham số thứ 3 tùy chọn là &lt;code&gt;inplace=True&lt;/code&gt;, mặc định không đề cập thì là False. True nghĩa là thay thế series cũ, false là tạo mới series sau khi thay thế.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/replace-data.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Trả về kiểu dữ liệu series. Nếu inplace=True thì không cần gán vào biến mới.
Ta nhận thấy sau khi thay thế dữ liệu, mean() của series sẽ thay đổi.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;arithmetic-với-series&quot;&gt;Arithmetic với Series&lt;/h4&gt;
&lt;p&gt;Tùy nhu cầu của bạn muốn tính toán hay combine giá trị của các cột với nhau. Ở ví dụ bài học này, ta sẽ cộng pounds và ounces lại với nhau.&lt;/p&gt;

&lt;p&gt;Đầu tiên ta phải đổi giá trị ounces thành pounds bằng cách chia 16 (cách đổi đơn vị cân nặng).&lt;/p&gt;

&lt;p&gt;Sau đó ta cộng lại. Kết quả trả về là 1 series là tổng giá trị của 2 series pounds và ounces.&lt;/p&gt;

&lt;p&gt;Đến đây ta có thể đưa kết luận giá trị trung bình của 1 đặc tính như cân nặng trong dataset bằng &lt;code&gt;series.describe()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/arithmetic-data.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-filter-và-visualize-data&quot;&gt;4. Filter và Visualize data&lt;/h2&gt;

&lt;h4 id=&quot;histogram&quot;&gt;Histogram&lt;/h4&gt;
&lt;p&gt;Dùng để biểu thị tần suất xuất hiện của giá trị trong dataset. Để dùng biểu đồ này trong python, ta dùng thư viện &lt;code&gt;matplotlib&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hist-analysis.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Tham số thứ 1 là series. Do histogram không nhận giá trị NaN nên chúng ta phải dùng hàm &lt;code&gt;dropna()&lt;/code&gt; để loại bỏ nó trong series.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tham số thứ 2 là bin. Số Bin nói với hist là nó muốn chia giá trị trên biểu đồ thành bao nhiêu interval (có thể hiểu là cột theo cân nặng đối với ví dụ) và đếm có bao nhiêu values trong dataset ứng với mỗi bin đó.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ngoài ra còn các thông số tùy chọn khác xem thêm tại đây: https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hist.html&lt;/p&gt;

&lt;p&gt;Quan sát biểu đồ hình trên, ta có thể thấy tần suất baby có cân nặng nhẹ xuất hiện nhiều hơn.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Ta thấy điều này hợp lý vì trong dataset có chứa dữ liệu các em bé sinh non có số tuần mang thai &amp;lt; 37 tuần.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;=&amp;gt; Theo đó, ta tiếp tục rút trích dữ liệu của cột chứa số tuần của baby.&lt;/p&gt;

&lt;p&gt;Để xem những em bé nào sinh non, ta dùng Boolean Series.&lt;/p&gt;

&lt;h4 id=&quot;boolean-series&quot;&gt;Boolean Series&lt;/h4&gt;
&lt;p&gt;Trả về series gồm các giá trị True hoặc False cho điều kiện mà ta áp dụng.&lt;/p&gt;

&lt;p&gt;Ta gán biểu thức gồm series của cột và điều kiện để trả về series chứa True và False:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;preterm = df[&quot;tên cột tuần sinh&quot;] &amp;lt;37&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/boolean-series.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nếu ta tính tổng hay trung bình cho Boolean Series, python sẽ treat True=1 và False=0.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;=&amp;gt; Do vậy kết quả của &lt;code&gt;preterm.sum()&lt;/code&gt; là 3742. Đây là số lượng baby sinh non ứng với True.&lt;/p&gt;

&lt;p&gt;Và khi ta tính trung bình của Series, ta sẽ được tỉ lệ của True. Do đó &lt;code&gt;preterm.mean()&lt;/code&gt; cho kết quả ~0.39987. Nghĩ là khoảng 40% số baby có trong dataset này là baby sinh non.&lt;/p&gt;

&lt;h4 id=&quot;filter&quot;&gt;Filter&lt;/h4&gt;

&lt;p&gt;Ta có thể dùng Boolean Series để filter ra các Series giá trị của cột nào đó mà thỏa điều kiện mong muốn.&lt;/p&gt;

&lt;p&gt;Ví dụ để select ra các giá trị cân nặng trong Series birth_weight của các baby sinh non, ta dựa vào Boolean series &lt;code&gt;preterm&lt;/code&gt; tương ứng các record True. Python sẽ đối chiếu cùng index với series chứa cân nặng của baby.&lt;/p&gt;

&lt;p&gt;Sau đó gán kết quả cho biến lưu series trả về chứa các giá trị cân nặng của em bé sinh non. Từ đó ta dễ dàng tính trung bình cân nặng của đối tượng này.
&lt;code&gt;preterm_weight = birth_weigth[preterm]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ngược lại, để tính toán trung bình cân nặng ta dùng dấu &lt;code&gt;~&lt;/code&gt; trước Boolean series để lấy giá trị ngược lại là False.&lt;/p&gt;

&lt;p&gt;Kết quả:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/boolean-filter.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nhận xét: Trung bình cân nặng của em bé thường sẽ &amp;gt; hơn em bé sinh non, và điều này hiển nhiên hợp lý.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nâng cao hơn, ta có thể sử dụng kết hợp &amp;gt;2 boolean series để filter. Khi đó ta sẽ cần dùng đến Logical Operators &lt;code&gt;AND&lt;/code&gt; hoặc &lt;code&gt;OR&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;birth_weight[A &amp;amp; B]	# both true

birth_weight[A | B]	# either or both true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;resampling&quot;&gt;Resampling&lt;/h3&gt;

&lt;p&gt;Cuối cùng trước khi có thể trả lời câu hỏi cho set dữ liệu, ta cần thực hiện Resampling.&lt;/p&gt;

&lt;p&gt;Nói sơ về &lt;code&gt;Sampling&lt;/code&gt; (lấy mẫu) trước. Sampling là quá trình chọn ra một tập con của một quần thể với mục tiêu đánh giá các tính chất của quần thể đó. Cách thức lấy mẫu phụ thuộc trực tiếp vào mục tiêu đánh giá của chúng ta, do đó sampling nằm gần ranh giới giữa việc quan sát khách quan và việc thực hiện các thực nghiệm mang tính chủ quan.&lt;/p&gt;

&lt;p&gt;Một số khía cạnh chúng ta cần cân nhắc khi lấy mẫu dữ liệu bao gồm:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mục tiêu.Tính chất của quần thể mà chúng ta muốn khảo sát đánh giá.&lt;/li&gt;
  &lt;li&gt;Quần thể. Phạm vi khảo sát dựa trên lý thuyết.&lt;/li&gt;
  &lt;li&gt;Tiêu chí lựa chọn. Các nguyên tắc cho việc chấp nhận / loại bỏ các quan sát.&lt;/li&gt;
  &lt;li&gt;Kích thước mẫu. Số lượng các quan sát được thu nhận trong mẫu.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;=&amp;gt; &lt;code&gt;Resampling data&lt;/code&gt;có ý nghĩa là cần khảo sát trên mẫu dữ liệu ta thu được nhiều lần để đánh giá độ chắc chắn cho các ước tính.&lt;/p&gt;

&lt;p&gt;Có hai phương pháp resampling thường được sử dụng là bootstrap và k-fold cross-validation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bootstrap. Các mẫu được lấy ra từ dataset một cách ngẫu nhiên, cho phép một mẫu được xuất hiện nhiều hơn một lần.&lt;/li&gt;
  &lt;li&gt;k-fold Cross-Validation. Dataset được chia thành k nhóm, mỗi nhóm sẽ được sử dụng để đánh giá 1 lần&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-probability-mass-functions-pmf&quot;&gt;5. Probability mass functions (PMF)&lt;/h2&gt;

&lt;h3 id=&quot;pmf-class&quot;&gt;PMF Class&lt;/h3&gt;

&lt;p&gt;Ngoài histogram, ta có thể dùng PMF để quan sát tần số xuất hiện của từng giá trị trong dataset. PMF Class làm việc dựa trên Pandas Series và cung cấp 1 số functions không có trong Pandas.&lt;/p&gt;

&lt;p&gt;Tham số đầu tiên có thể là các loại sequence bất kỳ.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pmf_educ = Pmf(educ, normalize=False)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*educ ở đây là Series object&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pmf1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Kết quả trả về 1 PMF object với giá trị ở bên trái và count số lần xuất hiện trong tập dataset ở bên phải.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Để lookup tần suất cho giá trị ở bên trái, ta chỉ cần dùng dấu ngoặc vuông:
&lt;code&gt;pmf_educ[12]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tuy nhiên thông thường khi cần dùng đến PMF thì thường ta muốn biết tỉ lệ xuất hiện của giá trị hơn là đếm&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lúc này ta chỉ cần set tham số thứ 2 là &lt;code&gt;normalize&lt;/code&gt; = True. Khi đó cột giá trị bên phải trả về tỉ lệ và tổng cột sẽ =1. Nếu muốn biết % ta chỉ cần *100 là được. Cách lookup cho 1 giá trị bất kỳ cũng tương tự trên.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pmf2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pmf-bar-chart&quot;&gt;PMF Bar chart&lt;/h3&gt;

&lt;p&gt;PMF có method riêng để hiển thị biểu đồ tần suất. Tùy ta muốn hiển thị tần suất theo tỉ lệ hay count thì ta dùng method lên biến lưu series ở bước trên.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pmf-bar.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;so-sánh-histogram-và-pmf&quot;&gt;So sánh Histogram và PMF&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/hist-pmf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tùy trường hợp nhưng trong ví dụ hình trên ta nhận xét:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;PMF show tất cả unique value giúp ta thấy rõ chính xác peak của data ở đâu.&lt;/li&gt;
  &lt;li&gt;Histogram đặt giá trị theo bin nên làm mập mờ các chi tiết quan trọng, như việc ta không thấy peak nằm ở giá trị 12, 14 và 16.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-cumulative-distribution-functions-cdf&quot;&gt;6. Cumulative distribution functions (CDF)&lt;/h2&gt;

&lt;h3 id=&quot;cdf-class&quot;&gt;CDF Class&lt;/h3&gt;

&lt;p&gt;Ngoài PMF, còn các cách khác để thể hiện distribution đó là CDF.&lt;/p&gt;

&lt;p&gt;CDF là cách hay để visualize và so sánh distribution của giá trị.&lt;/p&gt;

&lt;p&gt;CDF cách hoạt động gần giống như PMF, khác nhau ở chỗ:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PMF cho ra tỉ lệ của 1 giá trị trong series từ 0 đến 1.&lt;/li&gt;
  &lt;li&gt;CDF cho ra tỉ lệ xuất hiện của các giá trị &amp;lt;= giá trị đang tính toán từ 0 đến 1 (percentile).&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;cdf_educ = Cdf(educ, normalize=False)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Xem ví dụ sau:
&lt;img src=&quot;/assets/images/cdf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vẽ-biểu-đồ-plot-dùng-cdf&quot;&gt;Vẽ biểu đồ plot dùng CDF&lt;/h3&gt;

&lt;p&gt;Ta chỉ cần dùng class &lt;code&gt;Cdf()&lt;/code&gt; và input tham số là sequence của data mà ta muốn biểu thị tần suất. Ở hình dưới là “tuổi”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/cdf-plot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Đặc biệt, cdf có thể được sử dụng như 1 function với input là 1 giá trị cụ thể (biến số nguyên).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;q=51
p=cdf(q)
print(p)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;Kết quả cho ra 0.66. Nghĩa là có 66% số người có tuổi &amp;lt;=51.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;inverse-cdf&quot;&gt;Inverse CDF&lt;/h3&gt;
&lt;p&gt;CDF là 1 function đảo ngược. Nghĩa là bạn có thể từ giá trị probability (tỉ lệ) mà tra ngược lại giá trị tuổi bằng cách dùng &lt;code&gt;cdf.inverse(giá trị tỉ lệ)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/cdf-inverse.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Từ hình trên có thể nói rằng, tuổi 30 là percentile thứ 25 của distribution này. (do p=0,25)&lt;/p&gt;

&lt;p&gt;Nói sơ thêm về percentile. Khoảng cách từ 25th đến 75th percentile gọi là interquartile range (IQR), nó giúp đo lường sự trải rộng của distribution. Do vậy IQR tương tự như phương sai (variance) hoặc độ lệch chuẩn (standard deviation). Vì IQR được tính toán dựa trên percentiles nên nó sẽ không bị loại đi những giá trị cực hoặc ngoài rìa (cách mà phương sai làm). Do đó IQR “mạnh mẽ” hơn phương sai, nghĩa là nó vẫn làm tốt công việc của nó dù có giá trị lỗi hoặc giá trị cực trong tập data.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Giá trị cực (extreme value) là gì? Là những giá trị khi xuất hiện sẽ ảnh hưởng lớn đến sự thay đổi về xu hướng hội tụ (độ chụm, độ chính xác) kết quả tính toán chung của tập các số như các phép tính trung bình cộng, trung bình nhân,…&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;7-so-sánh-distributions&quot;&gt;7. So sánh Distributions&lt;/h2&gt;

&lt;p&gt;Ta có thể dùng PMF hoặc CDF để plot rồi visualize và phân tích. Tuy nhiên với CDF ta sẽ có cái nhìn rõ ràng, không bị nhiễu và biểu đồ đường (line chart) trông sẽ mượt hơn nhiều.&lt;/p&gt;

&lt;p&gt;Ta ví dụ tập dataset là income của cư dân trước và sau 1995:&lt;/p&gt;

&lt;h5 id=&quot;nếu-dùng-pmf-&quot;&gt;Nếu dùng PMF :&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pmf-compare.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kết quả chart:
&lt;img src=&quot;/assets/images/pmf-compare-chart.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;nếu-dùng-cdf-khuyến-khích&quot;&gt;Nếu dùng CDF (khuyến khích)&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/cdf-compare.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kết quả chart:
&lt;img src=&quot;/assets/images/pmf-compare-chart.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nhận xét data:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Dưới 300000$ thì income hầu như không thay đổi trước và sau 1995. Đường màu cam lệch sang phải ở mốc income 100000-150000$ nghĩa là income sau 1995 của những người có thu nhập cao có xu hướng tăng lên.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;changelog&quot;&gt;Changelog&lt;/h3&gt;
&lt;p&gt;Changelogs take you down the last mile&lt;/p&gt;

&lt;p&gt;A changelog can build on your automated version history by giving you an even more detailed record of your work. This is where data analysts record all the changes they make to the data. Here is another way of looking at it. Version histories record what was done in a data change for a project, but don’t tell us why. Changelogs are super useful for helping us understand the reasons changes have been made. Changelogs have no set format and you can even make your entries in a blank document. But if you are using a shared changelog, it is best to agree with other data analysts on the format of all your log entries.&lt;/p&gt;

&lt;p&gt;Typically, a changelog records this type of information:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Data, file, formula, query, or any other component that changed

Description of what changed

Date of the change

Person who made the change

Person who approved the change 

Version number 

Reason for the change
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s say you made a change to a formula in a spreadsheet because you observed it in another report and you wanted your data to match and be consistent. If you found out later that the report was actually using the wrong formula, an automated version history would help you undo the change. But if you also recorded the reason for the change in a changelog, you could go back to the creators of the report and let them know about the incorrect formula. If the change happened a while ago, you might not remember who to follow up with. Fortunately, your changelog would have that information ready for you! By following up, you would ensure data integrity outside your project. You would also be showing personal integrity as someone who can be trusted with data. That is the power of a changelog!&lt;/p&gt;

&lt;p&gt;Finally, a changelog is important for when lots of changes to a spreadsheet or query have been made. Imagine an analyst made four changes and the change they want to revert to is change #2. Instead of clicking the undo feature three times to undo change #2 (and losing changes #3 and #4), the analyst can undo just change #2 and keep all the other changes. Now, our example was for just 4 changes, but try to think about how important that changelog would be if there were hundreds of changes to keep track of.&lt;/p&gt;

&lt;h3 id=&quot;version-control-system&quot;&gt;Version control system&lt;/h3&gt;
&lt;p&gt;What also happens IRL (in real life)
Image of a woman writing something down. There are two speech bubbles floating near her&lt;/p&gt;

&lt;p&gt;A junior analyst probably only needs to know the above with one exception. If an analyst is making changes to an existing SQL query that is shared across the company, the company most likely uses what is called a version control system. An example might be a query that pulls daily revenue to build a dashboard for senior management.&lt;/p&gt;

&lt;p&gt;Here is how a version control system affects a change to a query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A company has official versions of important queries in their version control system.

An analyst makes sure the most up-to-date version of the query is the one they will change. This is called syncing 

The analyst makes a change to the query.

The analyst might ask someone to review this change. This is called a code review and can be informally or formally done. An informal review could be as simple as asking a senior analyst to take a look at the change.

After a reviewer approves the change, the analyst submits the updated version of the query to a repository in the company's version control system. This is called a code commit. A best practice is to document exactly what the change was and why it was made in a comments area. Going back to our example of a query that pulls daily revenue, a comment might be: Updated revenue to include revenue coming from the new product, Calypso.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;data-cleaning&quot;&gt;Data cleaning&lt;/h2&gt;

&lt;p&gt;Data-cleaning verification: A checklist&lt;/p&gt;

&lt;p&gt;This reading will give you a checklist of common problems you can refer to when doing your data cleaning verification, no matter what tool you are using. When it comes to data cleaning verification, there is no one-size-fits-all approach or a single checklist that can be universally applied to all projects. Each project has its own organization and data requirements that lead to a unique list of things to run through for verification. 
Image of a clipboard, pencil and post-it notes&lt;/p&gt;

&lt;p&gt;Keep in mind, as you receive more data or a better understanding of the project goal(s), you might want to revisit some or all of these steps. 
Correct the most common problems&lt;/p&gt;

&lt;p&gt;Make sure you identified the most common problems and corrected them, including:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sources of errors: Did you use the right tools and functions to find the source of the errors in your dataset?

Null data: Did you search for NULLs using conditional formatting and filters?

Misspelled words: Did you locate all misspellings?

Mistyped numbers: Did you double-check that your numeric data has been entered correctly?

Extra spaces and characters: Did you remove any extra spaces or characters using the TRIM function?

Duplicates: Did you remove duplicates in spreadsheets using the Remove Duplicates function or DISTINCT in SQL?

Mismatched data types: Did you check that numeric, date, and string data are typecast correctly?

Messy (inconsistent) strings: Did you make sure that all of your strings are consistent and meaningful?

Messy (inconsistent) date formats: Did you format the dates consistently throughout your dataset?

Misleading variable labels (columns): Did you name your columns meaningfully?

Truncated data: Did you check for truncated or missing data that needs correction?

Business Logic: Did you check that the data makes sense given your knowledge of the business? 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Review the goal of your project&lt;/p&gt;

&lt;p&gt;Once you have finished these data cleaning tasks, it is a good idea to review the goal of your project and confirm that your data is still aligned with that goal. This is a continuous process that you will do throughout your project– but here are three steps you can keep in mind while thinking about this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Confirm the business problem 

Confirm the goal of the project

Verify that data can solve the problem and is aligned to the goal 
After the change is submitted, everyone else in the company will be able to access and use this new query when they sync to the most up-to-date queries stored in the version control system.

If the query has a problem or business needs change, the analyst can undo the change to the query using the version control system. The analyst can look at a chronological list of all changes made to the query and who made each change. Then, after finding their own change, the analyst can revert to the previous version.

The query is back to what it was before the analyst made the change. And everyone at the company sees this reverted, original query, too.
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Fri, 03 Sep 2021 00:00:00 +0700</pubDate>
        <link>https://tuyen-nnt.github.io/data-analysis/</link>
        <guid isPermaLink="true">https://tuyen-nnt.github.io/data-analysis/</guid>
        
        
        <category>Data</category>
        
      </item>
    
      <item>
        <title>Tìm hiểu về giao thức HTTP</title>
        <description>&lt;h3 id=&quot;http-request&quot;&gt;HTTP request&lt;/h3&gt;

&lt;p&gt;HTTP là giao thức (protocol) giúp browser (client) giao tiếp với web server (server).&lt;/p&gt;

&lt;p&gt;Khi bạn truy cập 1 trang web nghĩa là bạn đang gửi 1 HTTP request đến web server. Trong HTTP request sẽ chứa Header và Body.&lt;/p&gt;

&lt;p&gt;Port mặc định của các giao thức HTTP hiện nay trên các trang web:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP: 80&lt;/li&gt;
  &lt;li&gt;HTTPS: 443&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;dòng-bắt-đầu-của-http-request-như-1-message-chứa-3-phần-sau&quot;&gt;Dòng bắt đầu của HTTP request (như 1 message) chứa 3 phần sau:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Version của protocol: HTTP/1.1&lt;/li&gt;
  &lt;li&gt;HTTP Method như &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;,&lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;OPTION&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Path của request : thông thường là 1 URL và format của nó phụ thuộc vào HTTP method. Ví dụ:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dùng đường dẫn tuyệt đối, phổ biến và thường dùng với GET, POST, HEAD, OPTIONS:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;POST / HTTP/1.1&lt;/li&gt;
  &lt;li&gt;GET /background.png HTTP/1.0 HEAD /test.html?query=alibaba HTTP/1.1&lt;/li&gt;
  &lt;li&gt;OPTIONS /anypage.html HTTP/1.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dùng đường dẫn hoàn chỉnh khi cần kết nối với proxy thông qua method GET:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GET https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages HTTP/1.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chỉ dùng authority form khi cần setup HTTP tunnel (domain name : port) bằng method CONNECT:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CONNECT developer.mozilla.org:80 HTTP/1.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dùng dấu &lt;code&gt;'*'&lt;/code&gt; khi muốn đường dẫn đại diện cho toàn bộ máy chủ thông qua method OPTIONS:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OPTIONS * HTTP/1.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;header-chứa-các-thông-tin-của-request-và-hầu-hết-ở-dưới-dạng-keyvalue&quot;&gt;Header chứa các thông tin của request và hầu hết ở dưới dạng key:value.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP-header.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Header của request được chia thành vài group chính:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;General header: apply cho toàn bộ message&lt;/li&gt;
  &lt;li&gt;Response header: chỉ định thêm cho request bằng cách sửa đổi 1 số thông số&lt;/li&gt;
  &lt;li&gt;Representation headers: như Content-Type để mô tả format của data gửi lên server và cho biết nếu data đó có apply encoding nào không (chỉ có phần này khi request có Body)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;header-key-có-thể-được-set-tùy-chỉnh-value&quot;&gt;Header key có thể được set tùy chỉnh value&lt;/h5&gt;

&lt;p&gt;Trong POST method, bạn tùy chỉnh theo mẫu sau:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Use case: Set the output type as JSON and json.dumps your output.
# Set_default_headers in a parent class called RESTRequestHandler. If you want just one request that is returning JSON you can set the headers in the post call.

class strest(tornado.web.RequestHandler):
    def set_default_headers(self):
        self.set_header(&quot;Content-Type&quot;, 'application/json')

    def post(self):
        value = self.get_argument('key')
        cbtp = cbt.main(value)
        r = json.dumps({'cbtp': cbtp})
        self.write(r)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tham khảo thêm các key info trong header tại: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers&lt;/p&gt;

&lt;h4 id=&quot;body&quot;&gt;Body&lt;/h4&gt;
&lt;p&gt;Không phải method nào cũng cần Body, hầu như GET, HEAD, DELETE, OPTIONS ít cần. Thông thường khi cần gửi request update thông tin gì đó lên server thì người ta dùng method POST request (chứa dữ liệu HTML form).&lt;/p&gt;

&lt;p&gt;Body chia thành 2 loại :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Single-resource body: chứa 1 loại file duy nhất, được định nghĩa bởi Content-Type và Content-Length (trong header).&lt;/li&gt;
  &lt;li&gt;Multiple-resource body : chứa multipart data, mỗi part chứa một số thông tin khác nhau. Các part được phân tác bởi dấu &lt;code&gt;--&lt;/code&gt; trong header ở phần Content-Type. Loại này thường được sử dụng với HTML form.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;Content-Type: multipart/form-data; boundary=aBoundaryString
(other headers associated with the multipart document as a whole)

--aBoundaryString
Content-Disposition: form-data; name=&quot;myFile&quot;; filename=&quot;img.jpg&quot;
Content-Type: image/jpeg

(data)
--aBoundaryString
Content-Disposition: form-data; name=&quot;myField&quot;

(data)
--aBoundaryString
(more subparts)
--aBoundaryString--
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;http-method&quot;&gt;HTTP Method:&lt;/h3&gt;

&lt;h4 id=&quot;get&quot;&gt;GET&lt;/h4&gt;
&lt;p&gt;Dữ liệu request sẽ hiển thị trên URL nên không bảo mật. Phù hợp khi cần download về dữ liệu gì đó vì nó truy xuất nhanh khi dữ liệu không hoặc ít bị thay đổi.&lt;/p&gt;

&lt;p&gt;Dữ liệu của phương thức này gửi đi thì hiện trên thanh địa chỉ (URL) của trình duyệt.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/test/demo_form.php?user=itplus&amp;amp;password=admin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Đặc điểm:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP GET có thể được cache bởi trình duyệt&lt;/li&gt;
  &lt;li&gt;HTTP GET có thể duy trì bởi lịch sử đó cũng là lý do mà người dùng có thê bookmark được.&lt;/li&gt;
  &lt;li&gt;HTTP GET không được sử dụng nếu trong form có các dữ liệu nhạy cảm như là password, tài khoản ngân hàng&lt;/li&gt;
  &lt;li&gt;HTTP GET bị giới hạn số trường độ dài data gửi đi&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;post&quot;&gt;POST&lt;/h4&gt;
&lt;p&gt;Dữ liệu gửi đi (khi request) sẽ không bị hiển thị trên thanh URL vì nó đã được encode (mã hóa) nên độ bảo mật cao.&lt;/p&gt;

&lt;p&gt;Đặc điểm:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP POST không cache bởi trình duyệt&lt;/li&gt;
  &lt;li&gt;HTTP POST không thể duy trì bởi lịch sử đó cũng là lý do mà người dùng không thê bookmark HTTP POST được.&lt;/li&gt;
  &lt;li&gt;HTTP POST không giới hạn dữ liệu gửi đi&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;phân-biệt-post-và-get&quot;&gt;Phân biệt POST và GET&lt;/h4&gt;

&lt;p&gt;Điểm chung: là các HTTP method dùng để trao đổi dữ liệu giữa client và server.&lt;/p&gt;

&lt;p&gt;Điểm khác nhau:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;POST: Bảo mật hơn GET vì dữ liệu được gửi&lt;/li&gt;
  &lt;li&gt;GET: Dữ liệu được gửi tường minh, chúng ta có thể nhìn thấy trên URL, đây là lý do khiến nó không bảo mật so với POST.&lt;/li&gt;
  &lt;li&gt;GET thực thi nhanh hơn POST vì những dữ liệu gửi đi luôn được webbrowser cached lại.&lt;/li&gt;
  &lt;li&gt;Khi dùng phương thức POST thì server luôn thực thi và trả về kết quả cho client, còn phương thức GET ứng với cùng một yêu cầu đó webbrowser sẽ xem trong cached có kết quả tương ứng với yêu cầu đó không và trả về ngay không cần phải thực thi các yêu cầu đó ở phía server.&lt;/li&gt;
  &lt;li&gt;Đối với những dữ liệu luôn được thay đổi thì chúng ta nên sử dụng phương thức POST, còn dữ liệu ít thay đổi chúng ta dùng phương thức GET để truy xuất và xử lý nhanh hơn.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;head&quot;&gt;HEAD&lt;/h4&gt;
&lt;p&gt;Trả về response là header của request.&lt;/p&gt;

&lt;h3 id=&quot;http-response&quot;&gt;HTTP response&lt;/h3&gt;
&lt;p&gt;Dòng đầu phần response chứa 3 thông tin:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Protocol version&lt;/li&gt;
  &lt;li&gt;Status code: mã trạng thái trả về để biết request thành công hay thất bại&lt;/li&gt;
  &lt;li&gt;Status text: text để giải thích cho code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Header của response được chia thành vài group chính:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;General header: apply cho toàn bộ message&lt;/li&gt;
  &lt;li&gt;Response header: chỉ định thêm cho request bằng cách sửa đổi 1 số thông số.&lt;/li&gt;
  &lt;li&gt;Representation headers: như Content-Type để mô tả format của data trong response message và cho biết nếu data có apply encoding nào không (chỉ có phần này khi request có Body).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTTP-response.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;body-1&quot;&gt;Body&lt;/h4&gt;
&lt;p&gt;Không phải response nào cũng có body khi mà response đã đáp ứng đủ request mà không cần payload gì thêm. VÍ dụ như các status code như 201 Created hoặc 204 No Content.&lt;/p&gt;

&lt;p&gt;Body response có thể chia thành 3 loại :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Single-resource body: chứa 1 loại file duy nhất, được định nghĩa bởi Content-Type và Content-Length (trong header).&lt;/li&gt;
  &lt;li&gt;Single-resource body: chứa 1 loại file duy nhất, không biết độ dài, được mã hóa bằng các khối với key Transfer-Encoding : chunked.&lt;/li&gt;
  &lt;li&gt;Multiple-resource body : chứa multipart section, mỗi section chứa một số thông tin khác nhau. Loại này ít gặp.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;http-location&quot;&gt;HTTP Location&lt;/h3&gt;
&lt;p&gt;Trong phần này có liên quan đến Redirection&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages
https://developer.ibm.com/articles/what-is-curl-command/&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Sep 2021 00:00:00 +0700</pubDate>
        <link>https://tuyen-nnt.github.io/http/</link>
        <guid isPermaLink="true">https://tuyen-nnt.github.io/http/</guid>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Setup Jekyll themes</title>
        <description>&lt;h2 id=&quot;fork-jekyll-theme--play&quot;&gt;Fork Jekyll theme &amp;amp; Play&lt;/h2&gt;

&lt;p&gt;Đây là theme blog mình đang sử dụng: https://github.com/tuyen-nnt/jekyll-theme-memoirs&lt;/p&gt;

&lt;p&gt;Các bước build Jekyll cho blog này: https://bootstrapstarter.com/jekyll-theme-memoirs/
(Tìm hiểu thêm tại: https://jekyllrb.com/docs/)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;B1: git clone https://github.com/wowthemesnet/jekyll-theme-memoirs.git&lt;/li&gt;
  &lt;li&gt;B2: Tải Ruby https://www.ruby-lang.org/en/documentation/installation/&lt;/li&gt;
  &lt;li&gt;B3: cd vào thư mục theme rồi &lt;code&gt;gem install bundler&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;B4: &lt;code&gt;bundle install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kết quả build thành công:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/bundle-install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;B5: Sửa lại &lt;code&gt;_config.yml&lt;/code&gt; theo blog của mình&lt;/li&gt;
  &lt;li&gt;B6: &lt;code&gt;bundle exec jekyll serve --watch&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;B7: Xem web blog tại http://127.0.0.1:4000/jekyll-theme-memoirs (nếu folder vẫn giữ tên cũ)&lt;/li&gt;
  &lt;li&gt;B8: Thêm blogs định dạng &lt;code&gt;.md&lt;/code&gt; vào folder &lt;code&gt;_posts&lt;/code&gt;. Trước mỗi bài viết sẽ có ô YAML là định dạng chung, bạn chỉ cần điền vào thông tin của mình là được (nhưng vẫn giữ form nhé). Chi tiết xem link các bước thực hiện.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tìm hiểu về Bundler install: https://bundler.io/&lt;/p&gt;

&lt;p&gt;Tìm hiểu về Gemfile: https://bundler.io/gemfile.html&lt;/p&gt;

</description>
        <pubDate>Tue, 10 Aug 2021 00:00:00 +0700</pubDate>
        <link>https://tuyen-nnt.github.io/Jekyll-install/</link>
        <guid isPermaLink="true">https://tuyen-nnt.github.io/Jekyll-install/</guid>
        
        
        <category>Git</category>
        
        <category>Blog</category>
        
        <category>Web</category>
        
      </item>
    
  </channel>
</rss>
